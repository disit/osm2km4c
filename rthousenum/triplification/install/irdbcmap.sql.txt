/* OSM2KM4C
   Copyright (C) 2017 DISIT Lab http://www.disit.org - University of Florence

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */
   
-- CONFIGURAZIONE DELL'INSTALLAZIONE
------------------------------------

-- Delimitazione geografica dell'installazione

drop table if exists extra_config_boundaries; 

create table extra_config_boundaries as
select relation_id, ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) geom from ( 
	select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring 
	from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
	where relation_members.relation_id in (276369) --> TAGLIO SU ENTE TERRITORIALE DI INTERESSE, POSSO INSERIRE ANCHE UNA LISTA SEPARATA DA VIRGOLE
	order by relation_members.relation_id, relation_members.sequence_id
) boundaries 
group by relation_id;

-- Grafo

drop table if exists extra_config_graph ;

create table extra_config_graph (
id serial primary key,
graph_uri varchar(255)
);

insert into extra_config_graph(graph_uri) values ('http://www.disit.org/km4city/graph/OSM/CA'); 

-- Denominazioni urbanistiche generiche

drop table if exists extra_generic_namings ;

create table extra_generic_namings (
	id serial primary key,		
	naming varchar(255)		
);

INSERT INTO extra_generic_namings(naming) values ('accesso'); 
INSERT INTO extra_generic_namings(naming) values ('allea'); 
INSERT INTO extra_generic_namings(naming) values ('alinea'); 
INSERT INTO extra_generic_namings(naming) values ('alzaia'); 
INSERT INTO extra_generic_namings(naming) values ('androna'); 
INSERT INTO extra_generic_namings(naming) values ('angiporto'); 
INSERT INTO extra_generic_namings(naming) values ('arco'); 
INSERT INTO extra_generic_namings(naming) values ('archivolto'); 
INSERT INTO extra_generic_namings(naming) values ('arena'); 
INSERT INTO extra_generic_namings(naming) values ('bacino'); 
INSERT INTO extra_generic_namings(naming) values ('baluardo'); 
INSERT INTO extra_generic_namings(naming) values ('banchi'); 
INSERT INTO extra_generic_namings(naming) values ('banchina'); 
INSERT INTO extra_generic_namings(naming) values ('barbarìa'); 
INSERT INTO extra_generic_namings(naming) values ('bastione'); 
INSERT INTO extra_generic_namings(naming) values ('bastioni'); 
INSERT INTO extra_generic_namings(naming) values ('belvedere'); 
INSERT INTO extra_generic_namings(naming) values ('borgata'); 
INSERT INTO extra_generic_namings(naming) values ('borgo'); 
INSERT INTO extra_generic_namings(naming) values ('borgoloco'); 
INSERT INTO extra_generic_namings(naming) values ('cal'); 
INSERT INTO extra_generic_namings(naming) values ('calata'); 
INSERT INTO extra_generic_namings(naming) values ('calle'); 
INSERT INTO extra_generic_namings(naming) values ('calle larga'); 
INSERT INTO extra_generic_namings(naming) values ('calle lunga'); 
INSERT INTO extra_generic_namings(naming) values ('calle stretta'); 
INSERT INTO extra_generic_namings(naming) values ('callesèlla'); 
INSERT INTO extra_generic_namings(naming) values ('callesèllo'); 
INSERT INTO extra_generic_namings(naming) values ('callétta'); 
INSERT INTO extra_generic_namings(naming) values ('campiello'); 
INSERT INTO extra_generic_namings(naming) values ('campo'); 
INSERT INTO extra_generic_namings(naming) values ('canale'); 
INSERT INTO extra_generic_namings(naming) values ('cantone'); 
INSERT INTO extra_generic_namings(naming) values ('capo di piazza'); 
INSERT INTO extra_generic_namings(naming) values ('carraia'); 
INSERT INTO extra_generic_namings(naming) values ('carrara'); 
INSERT INTO extra_generic_namings(naming) values ('carrarone'); 
INSERT INTO extra_generic_namings(naming) values ('carro'); 
INSERT INTO extra_generic_namings(naming) values ('cascina'); 
INSERT INTO extra_generic_namings(naming) values ('case sparse'); 
INSERT INTO extra_generic_namings(naming) values ('cavalcavia'); 
INSERT INTO extra_generic_namings(naming) values ('cavone'); 
INSERT INTO extra_generic_namings(naming) values ('chiasso'); 
INSERT INTO extra_generic_namings(naming) values ('chiassetto'); 
INSERT INTO extra_generic_namings(naming) values ('chiassuola'); 
INSERT INTO extra_generic_namings(naming) values ('circonvallazione'); 
INSERT INTO extra_generic_namings(naming) values ('circumvallazione'); 
INSERT INTO extra_generic_namings(naming) values ('claustro'); 
INSERT INTO extra_generic_namings(naming) values ('clivio'); 
INSERT INTO extra_generic_namings(naming) values ('clivo'); 
INSERT INTO extra_generic_namings(naming) values ('complanare'); 
INSERT INTO extra_generic_namings(naming) values ('contrà'); 
INSERT INTO extra_generic_namings(naming) values ('contrada'); 
INSERT INTO extra_generic_namings(naming) values ('corsetto'); 
INSERT INTO extra_generic_namings(naming) values ('corsia'); 
INSERT INTO extra_generic_namings(naming) values ('corso'); 
INSERT INTO extra_generic_namings(naming) values ('corte'); 
INSERT INTO extra_generic_namings(naming) values ('cortesela'); 
INSERT INTO extra_generic_namings(naming) values ('corticella'); 
INSERT INTO extra_generic_namings(naming) values ('cortile'); 
INSERT INTO extra_generic_namings(naming) values ('cortile privato'); 
INSERT INTO extra_generic_namings(naming) values ('costa'); 
INSERT INTO extra_generic_namings(naming) values ('crocicchio'); 
INSERT INTO extra_generic_namings(naming) values ('crosa'); 
INSERT INTO extra_generic_namings(naming) values ('cupa'); 
INSERT INTO extra_generic_namings(naming) values ('cupa vicinale'); 
INSERT INTO extra_generic_namings(naming) values ('diramazione'); 
INSERT INTO extra_generic_namings(naming) values ('discesa'); 
INSERT INTO extra_generic_namings(naming) values ('distacco'); 
INSERT INTO extra_generic_namings(naming) values ('emiciclo'); 
INSERT INTO extra_generic_namings(naming) values ('erta'); 
INSERT INTO extra_generic_namings(naming) values ('estramurale'); 
INSERT INTO extra_generic_namings(naming) values ('fondaco'); 
INSERT INTO extra_generic_namings(naming) values ('fondamenta'); 
INSERT INTO extra_generic_namings(naming) values ('fondo'); 
INSERT INTO extra_generic_namings(naming) values ('fossa'); 
INSERT INTO extra_generic_namings(naming) values ('fossato'); 
INSERT INTO extra_generic_namings(naming) values ('frazione'); 
INSERT INTO extra_generic_namings(naming) values ('galleria'); 
INSERT INTO extra_generic_namings(naming) values ('gradinata'); 
INSERT INTO extra_generic_namings(naming) values ('gradini'); 
INSERT INTO extra_generic_namings(naming) values ('gradoni'); 
INSERT INTO extra_generic_namings(naming) values ('granviale'); 
INSERT INTO extra_generic_namings(naming) values ('isola'); 
INSERT INTO extra_generic_namings(naming) values ('larghetto'); 
INSERT INTO extra_generic_namings(naming) values ('largo'); 
INSERT INTO extra_generic_namings(naming) values ('laterale'); 
INSERT INTO extra_generic_namings(naming) values ('lido'); 
INSERT INTO extra_generic_namings(naming) values ('lista'); 
INSERT INTO extra_generic_namings(naming) values ('litoranea'); 
INSERT INTO extra_generic_namings(naming) values ('località'); 
INSERT INTO extra_generic_namings(naming) values ('lungadige'); 
INSERT INTO extra_generic_namings(naming) values ('lungarno'); 
INSERT INTO extra_generic_namings(naming) values ('lungo'); 
INSERT INTO extra_generic_namings(naming) values ('lungoadda'); 
INSERT INTO extra_generic_namings(naming) values ('lungoargine'); 
INSERT INTO extra_generic_namings(naming) values ('lungobisagno'); 
INSERT INTO extra_generic_namings(naming) values ('lungo Brenta'); 
INSERT INTO extra_generic_namings(naming) values ('lungobusento'); 
INSERT INTO extra_generic_namings(naming) values ('lungocalore'); 
INSERT INTO extra_generic_namings(naming) values ('lungo Castellano'); 
INSERT INTO extra_generic_namings(naming) values ('lungocrati'); 
INSERT INTO extra_generic_namings(naming) values ('lungocanale'); 
INSERT INTO extra_generic_namings(naming) values ('lungocurone'); 
INSERT INTO extra_generic_namings(naming) values ('lungodora'); 
INSERT INTO extra_generic_namings(naming) values ('lungofiume'); 
INSERT INTO extra_generic_namings(naming) values ('lungofoglia'); 
INSERT INTO extra_generic_namings(naming) values ('lungofrigido'); 
INSERT INTO extra_generic_namings(naming) values ('lungogesso'); 
INSERT INTO extra_generic_namings(naming) values ('lungoisarco'); 
INSERT INTO extra_generic_namings(naming) values ('lungoisonzo'); 
INSERT INTO extra_generic_namings(naming) values ('lungolago'); 
INSERT INTO extra_generic_namings(naming) values ('lungolario');  
INSERT INTO extra_generic_namings(naming) values ('lungolinea'); 
INSERT INTO extra_generic_namings(naming) values ('lungoliri'); 
INSERT INTO extra_generic_namings(naming) values ('lungomare');  
INSERT INTO extra_generic_namings(naming) values ('lungomazaro'); 
INSERT INTO extra_generic_namings(naming) values ('lungomolo'); 
INSERT INTO extra_generic_namings(naming) values ('lungonera'); 
INSERT INTO extra_generic_namings(naming) values ('lungoparco'); 
INSERT INTO extra_generic_namings(naming) values ('lungo Po'); 
INSERT INTO extra_generic_namings(naming) values ('lungoporto'); 
INSERT INTO extra_generic_namings(naming) values ('lungosabato'); 
INSERT INTO extra_generic_namings(naming) values ('lungosile'); 
INSERT INTO extra_generic_namings(naming) values ('lungostura'); 
INSERT INTO extra_generic_namings(naming) values ('lungotalvera'); 
INSERT INTO extra_generic_namings(naming) values ('lungotanaro'); 
INSERT INTO extra_generic_namings(naming) values ('lungotevere'); 
INSERT INTO extra_generic_namings(naming) values ('lungoticino'); 
INSERT INTO extra_generic_namings(naming) values ('lungotorrente'); 
INSERT INTO extra_generic_namings(naming) values ('lungotronto'); 
INSERT INTO extra_generic_namings(naming) values ('lungovelino'); 
INSERT INTO extra_generic_namings(naming) values ('masseria'); 
INSERT INTO extra_generic_namings(naming) values ('merceria'); 
INSERT INTO extra_generic_namings(naming) values ('molo'); 
INSERT INTO extra_generic_namings(naming) values ('mura'); 
INSERT INTO extra_generic_namings(naming) values ('murazzi del Po'); 
INSERT INTO extra_generic_namings(naming) values ('parallela'); 
INSERT INTO extra_generic_namings(naming) values ('passaggio'); 
INSERT INTO extra_generic_namings(naming) values ('passaggio privato'); 
INSERT INTO extra_generic_namings(naming) values ('passeggiata'); 
INSERT INTO extra_generic_namings(naming) values ('passeggio'); 
INSERT INTO extra_generic_namings(naming) values ('passo'); 
INSERT INTO extra_generic_namings(naming) values ('passo di piazza'); 
INSERT INTO extra_generic_namings(naming) values ('pendice'); 
INSERT INTO extra_generic_namings(naming) values ('pendino'); 
INSERT INTO extra_generic_namings(naming) values ('pendio'); 
INSERT INTO extra_generic_namings(naming) values ('penninata'); 
INSERT INTO extra_generic_namings(naming) values ('piaggia'); 
INSERT INTO extra_generic_namings(naming) values ('piazza'); 
INSERT INTO extra_generic_namings(naming) values ('piazza inferiore'); 
INSERT INTO extra_generic_namings(naming) values ('piazza privata'); 
INSERT INTO extra_generic_namings(naming) values ('piazzale'); 
INSERT INTO extra_generic_namings(naming) values ('piazzetta'); 
INSERT INTO extra_generic_namings(naming) values ('piazzetta privata'); 
INSERT INTO extra_generic_namings(naming) values ('piscina'); 
INSERT INTO extra_generic_namings(naming) values ('ponte'); 
INSERT INTO extra_generic_namings(naming) values ('portico'); 
INSERT INTO extra_generic_namings(naming) values ('porto'); 
INSERT INTO extra_generic_namings(naming) values ('prato'); 
INSERT INTO extra_generic_namings(naming) values ('prolungamento'); 
INSERT INTO extra_generic_namings(naming) values ('quadrato'); 
INSERT INTO extra_generic_namings(naming) values ('raggio'); 
INSERT INTO extra_generic_namings(naming) values ('ramo'); 
INSERT INTO extra_generic_namings(naming) values ('rampa'); 
INSERT INTO extra_generic_namings(naming) values ('rampa privata'); 
INSERT INTO extra_generic_namings(naming) values ('rampari'); 
INSERT INTO extra_generic_namings(naming) values ('rampe'); 
INSERT INTO extra_generic_namings(naming) values ('ratto'); 
INSERT INTO extra_generic_namings(naming) values ('regione'); 
INSERT INTO extra_generic_namings(naming) values ('rettifilo'); 
INSERT INTO extra_generic_namings(naming) values ('regaste'); 
INSERT INTO extra_generic_namings(naming) values ('riello'); 
INSERT INTO extra_generic_namings(naming) values ('rione'); 
INSERT INTO extra_generic_namings(naming) values ('rio'); 
INSERT INTO extra_generic_namings(naming) values ('rio terà'); 
INSERT INTO extra_generic_namings(naming) values ('ripa'); 
INSERT INTO extra_generic_namings(naming) values ('riva'); 
INSERT INTO extra_generic_namings(naming) values ('riviera'); 
INSERT INTO extra_generic_namings(naming) values ('rondò'); 
INSERT INTO extra_generic_namings(naming) values ('rotonda'); 
INSERT INTO extra_generic_namings(naming) values ('rua'); 
INSERT INTO extra_generic_namings(naming) values ('ruga'); 
INSERT INTO extra_generic_namings(naming) values ('rugheta'); 
INSERT INTO extra_generic_namings(naming) values ('sacca'); 
INSERT INTO extra_generic_namings(naming) values ('sagrato'); 
INSERT INTO extra_generic_namings(naming) values ('saia'); 
INSERT INTO extra_generic_namings(naming) values ('salita'); 
INSERT INTO extra_generic_namings(naming) values ('salita inferiore'); 
INSERT INTO extra_generic_namings(naming) values ('salita superiore'); 
INSERT INTO extra_generic_namings(naming) values ('salizada'); 
INSERT INTO extra_generic_namings(naming) values ('scalea'); 
INSERT INTO extra_generic_namings(naming) values ('scalette'); 
INSERT INTO extra_generic_namings(naming) values ('scalinata'); 
INSERT INTO extra_generic_namings(naming) values ('scalone'); 
INSERT INTO extra_generic_namings(naming) values ('scesa'); 
INSERT INTO extra_generic_namings(naming) values ('sdrucciolo'); 
INSERT INTO extra_generic_namings(naming) values ('selciato'); 
INSERT INTO extra_generic_namings(naming) values ('sentiero'); 
INSERT INTO extra_generic_namings(naming) values ('slargo'); 
INSERT INTO extra_generic_namings(naming) values ('sopportico'); 
INSERT INTO extra_generic_namings(naming) values ('sotoportego'); 
INSERT INTO extra_generic_namings(naming) values ('sottoportico'); 
INSERT INTO extra_generic_namings(naming) values ('spalto'); 
INSERT INTO extra_generic_namings(naming) values ('spiaggia'); 
INSERT INTO extra_generic_namings(naming) values ('spianata'); 
INSERT INTO extra_generic_namings(naming) values ('spiazzo'); 
INSERT INTO extra_generic_namings(naming) values ('strada'); 
INSERT INTO extra_generic_namings(naming) values ('strada accorciatoia'); 
INSERT INTO extra_generic_namings(naming) values ('strada alzaia'); 
INSERT INTO extra_generic_namings(naming) values ('strada antica'); 
INSERT INTO extra_generic_namings(naming) values ('strada arginale'); 
INSERT INTO extra_generic_namings(naming) values ('strada bassa'); 
INSERT INTO extra_generic_namings(naming) values ('strada cantoniera'); 
INSERT INTO extra_generic_namings(naming) values ('strada carrareccia'); 
INSERT INTO extra_generic_namings(naming) values ('strada consolare'); 
INSERT INTO extra_generic_namings(naming) values ('strada consortile'); 
INSERT INTO extra_generic_namings(naming) values ('strada consorziale'); 
INSERT INTO extra_generic_namings(naming) values ('strada di bonifica'); 
INSERT INTO extra_generic_namings(naming) values ('strada esterna'); 
INSERT INTO extra_generic_namings(naming) values ('strada inferiore'); 
INSERT INTO extra_generic_namings(naming) values ('strada intercomunale'); 
INSERT INTO extra_generic_namings(naming) values ('strada interna'); 
INSERT INTO extra_generic_namings(naming) values ('strada interpoderale'); 
INSERT INTO extra_generic_namings(naming) values ('strada litoranea'); 
INSERT INTO extra_generic_namings(naming) values ('strada militare'); 
INSERT INTO extra_generic_namings(naming) values ('strada nazionale'); 
INSERT INTO extra_generic_namings(naming) values ('strada panoramica'); 
INSERT INTO extra_generic_namings(naming) values ('strada pedonale'); 
INSERT INTO extra_generic_namings(naming) values ('strada perimetrale'); 
INSERT INTO extra_generic_namings(naming) values ('strada poderale'); 
INSERT INTO extra_generic_namings(naming) values ('strada privata'); 
INSERT INTO extra_generic_namings(naming) values ('strada provinciale'); 
INSERT INTO extra_generic_namings(naming) values ('strada regionale'); 
INSERT INTO extra_generic_namings(naming) values ('strada rotabile'); 
INSERT INTO extra_generic_namings(naming) values ('strada rurale'); 
INSERT INTO extra_generic_namings(naming) values ('strada traversante'); 
INSERT INTO extra_generic_namings(naming) values ('strada vicinale'); 
INSERT INTO extra_generic_namings(naming) values ('stradale'); 
INSERT INTO extra_generic_namings(naming) values ('stradella');  
INSERT INTO extra_generic_namings(naming) values ('stradello'); 
INSERT INTO extra_generic_namings(naming) values ('stradetta'); 
INSERT INTO extra_generic_namings(naming) values ('stradone'); 
INSERT INTO extra_generic_namings(naming) values ('stradoncello'); 
INSERT INTO extra_generic_namings(naming) values ('stretta'); 
INSERT INTO extra_generic_namings(naming) values ('stretto'); 
INSERT INTO extra_generic_namings(naming) values ('strettoia'); 
INSERT INTO extra_generic_namings(naming) values ('strettola'); 
INSERT INTO extra_generic_namings(naming) values ('svoto'); 
INSERT INTO extra_generic_namings(naming) values ('supportico'); 
INSERT INTO extra_generic_namings(naming) values ('terrazza'); 
INSERT INTO extra_generic_namings(naming) values ('tondo'); 
INSERT INTO extra_generic_namings(naming) values ('traversa'); 
INSERT INTO extra_generic_namings(naming) values ('traversa privata'); 
INSERT INTO extra_generic_namings(naming) values ('traversale'); 
INSERT INTO extra_generic_namings(naming) values ('trasversale'); 
INSERT INTO extra_generic_namings(naming) values ('tratturo'); 
INSERT INTO extra_generic_namings(naming) values ('trazzera'); 
INSERT INTO extra_generic_namings(naming) values ('tresanda'); 
INSERT INTO extra_generic_namings(naming) values ('tronco'); 
INSERT INTO extra_generic_namings(naming) values ('vanella');  
INSERT INTO extra_generic_namings(naming) values ('vallone');  
INSERT INTO extra_generic_namings(naming) values ('via');  
INSERT INTO extra_generic_namings(naming) values ('via accorciatoia');  
INSERT INTO extra_generic_namings(naming) values ('via al mare');  
INSERT INTO extra_generic_namings(naming) values ('via alta'); 
INSERT INTO extra_generic_namings(naming) values ('via alzaia');  
INSERT INTO extra_generic_namings(naming) values ('via antica'); 
INSERT INTO extra_generic_namings(naming) values ('via arginale'); 
INSERT INTO extra_generic_namings(naming) values ('via bassa'); 
INSERT INTO extra_generic_namings(naming) values ('via circolare'); 
INSERT INTO extra_generic_namings(naming) values ('via comunale'); 
INSERT INTO extra_generic_namings(naming) values ('via consolare'); 
INSERT INTO extra_generic_namings(naming) values ('via cupa'); 
INSERT INTO extra_generic_namings(naming) values ('via destra'); 
INSERT INTO extra_generic_namings(naming) values ('via erta'); 
INSERT INTO extra_generic_namings(naming) values ('via estramurale'); 
INSERT INTO extra_generic_namings(naming) values ('via inferiore'); 
INSERT INTO extra_generic_namings(naming) values ('via intercomunale'); 
INSERT INTO extra_generic_namings(naming) values ('via interna'); 
INSERT INTO extra_generic_namings(naming) values ('via laterale'); 
INSERT INTO extra_generic_namings(naming) values ('via lungomare'); 
INSERT INTO extra_generic_namings(naming) values ('via militare'); 
INSERT INTO extra_generic_namings(naming) values ('via nazionale'); 
INSERT INTO extra_generic_namings(naming) values ('via nuova'); 
INSERT INTO extra_generic_namings(naming) values ('via pedonale'); 
INSERT INTO extra_generic_namings(naming) values ('via privata'); 
INSERT INTO extra_generic_namings(naming) values ('via provinciale'); 
INSERT INTO extra_generic_namings(naming) values ('via regionale'); 
INSERT INTO extra_generic_namings(naming) values ('via rotabile'); 
INSERT INTO extra_generic_namings(naming) values ('via rurale'); 
INSERT INTO extra_generic_namings(naming) values ('via sinistra'); 
INSERT INTO extra_generic_namings(naming) values ('via stretta'); 
INSERT INTO extra_generic_namings(naming) values ('via superiore'); 
INSERT INTO extra_generic_namings(naming) values ('via trasversale'); 
INSERT INTO extra_generic_namings(naming) values ('via vecchia'); 
INSERT INTO extra_generic_namings(naming) values ('via vicinale'); 
INSERT INTO extra_generic_namings(naming) values ('vial'); 
INSERT INTO extra_generic_namings(naming) values ('viale'); 
INSERT INTO extra_generic_namings(naming) values ('viale lungomare'); 
INSERT INTO extra_generic_namings(naming) values ('viale privato'); 
INSERT INTO extra_generic_namings(naming) values ('vialetto'); 
INSERT INTO extra_generic_namings(naming) values ('vialone'); 
INSERT INTO extra_generic_namings(naming) values ('vicinale'); 
INSERT INTO extra_generic_namings(naming) values ('vicoletto'); 
INSERT INTO extra_generic_namings(naming) values ('vicoletto cieco'); 
INSERT INTO extra_generic_namings(naming) values ('vicolo'); 
INSERT INTO extra_generic_namings(naming) values ('vicolo chiuso'); 
INSERT INTO extra_generic_namings(naming) values ('vicolo cieco'); 
INSERT INTO extra_generic_namings(naming) values ('vico'); 
INSERT INTO extra_generic_namings(naming) values ('vico estramurale'); 
INSERT INTO extra_generic_namings(naming) values ('vico inferiore'); 
INSERT INTO extra_generic_namings(naming) values ('vico lungo'); 
INSERT INTO extra_generic_namings(naming) values ('vico nuovo'); 
INSERT INTO extra_generic_namings(naming) values ('vico privato'); 
INSERT INTO extra_generic_namings(naming) values ('vico rotto'); 
INSERT INTO extra_generic_namings(naming) values ('vico storto'); 
INSERT INTO extra_generic_namings(naming) values ('vico stretto'); 
INSERT INTO extra_generic_namings(naming) values ('vico superiore'); 
INSERT INTO extra_generic_namings(naming) values ('viella'); 
INSERT INTO extra_generic_namings(naming) values ('vietta'); 
INSERT INTO extra_generic_namings(naming) values ('villaggio'); 
INSERT INTO extra_generic_namings(naming) values ('viottolo'); 
INSERT INTO extra_generic_namings(naming) values ('viuzza'); 
INSERT INTO extra_generic_namings(naming) values ('viuzzo'); 
INSERT INTO extra_generic_namings(naming) values ('vocabolo'); 
INSERT INTO extra_generic_namings(naming) values ('volti'); 
INSERT INTO extra_generic_namings(naming) values ('voltone'); 
INSERT INTO extra_generic_namings(naming) values ('SS'); 
INSERT INTO extra_generic_namings(naming) values ('SR'); 
INSERT INTO extra_generic_namings(naming) values ('SP'); 
INSERT INTO extra_generic_namings(naming) values ('SC');
INSERT INTO extra_generic_namings(naming) values ('S.S.'); 
INSERT INTO extra_generic_namings(naming) values ('S.R.'); 
INSERT INTO extra_generic_namings(naming) values ('S.P.'); 
INSERT INTO extra_generic_namings(naming) values ('S.C.');
INSERT INTO extra_generic_namings(naming) values ('SS.'); 
INSERT INTO extra_generic_namings(naming) values ('SR.'); 
INSERT INTO extra_generic_namings(naming) values ('SP.'); 
INSERT INTO extra_generic_namings(naming) values ('SC.');
INSERT INTO extra_generic_namings(naming) values ('S. S.'); 
INSERT INTO extra_generic_namings(naming) values ('S. R.'); 
INSERT INTO extra_generic_namings(naming) values ('S. P.');
INSERT INTO extra_generic_namings(naming) values ('S. C.');
INSERT INTO extra_generic_namings(naming) values ('strada statale');
INSERT INTO extra_generic_namings(naming) values ('strada regionale');
INSERT INTO extra_generic_namings(naming) values ('strada provinciale');
INSERT INTO extra_generic_namings(naming) values ('strada comunale');

-- Esplosione delle way

drop table if exists extra_ways;

create table extra_ways as
select prev_waynode.way_id global_id, prev_waynode.sequence_id local_id, prev_node.geom start_node, next_node.geom end_node, prev_node.id prev_node_id, next_node.id next_node_id
from way_nodes prev_waynode 
join nodes prev_node on prev_waynode.node_id = prev_node.id
join way_nodes next_waynode on prev_waynode.way_id = next_waynode.way_id and prev_waynode.sequence_id = next_waynode.sequence_id-1
join nodes next_node on next_waynode.node_id = next_node.id;

create index on extra_ways (global_id);

-- Utilizzo dei numeri civici della Regione Toscana piuttosto che nativi di OSM

drop table if exists extra_config_civic_num ;

create table extra_config_civic_num (
id serial primary key,
civic_num_source varchar(255)
);

-- insert into extra_config_civic_num(civic_num_source) values ('Regione Toscana'); -- decommentare questa riga per utilizzare i numeri civici della Regione Toscana
insert into extra_config_civic_num(civic_num_source) values ('Open Street Map'); -- decommentare questa riga per utilizzare i numeri civici nativi di Open Street Map

/********************************************
************ TABELLE DI APPOGGIO ************
*********************************************/

-- Centroidi dei comuni di interesse

drop table if exists comuni_centroid_geom;

create table comuni_centroid_geom as
select com.relation_id, com.geom from (
select relation_id, ST_GeogFromText(ST_AsText(ST_Centroid(ST_Polygonize(linestring)))) geom, ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) boundary from ( select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '8' 
join relation_tags catasto on relation_members.relation_id = catasto.relation_id and catasto.k = 'ref:catasto' -- taglio sugli italiani
order by relation_members.relation_id, relation_members.sequence_id
 ) com 
group by relation_id
) com join extra_config_boundaries boundaries on ST_Covers(boundaries.geom, com.geom) or boundaries.geom = com.boundary;

-- Confini dei comuni di interesse

drop table if exists comuni_border_geom ;

create table comuni_border_geom as
select com_border.* from 
(
select relation_id, 
ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) geom
from 
( 
select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring 
from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '8' 
join relation_tags catasto on relation_members.relation_id = catasto.relation_id and catasto.k = 'ref:catasto' -- taglio sugli italiani
order by relation_members.relation_id, relation_members.sequence_id
) com_border 
group by relation_id
) com_border
join comuni_centroid_geom com_centroid on com_border.relation_id = com_centroid.relation_id;

-- Centroidi delle province di interesse

drop table if exists province_centroid_geom ;

create table province_centroid_geom as
select prov.relation_id, prov.geom from (
select relation_id, ST_GeogFromText(ST_AsText(ST_Centroid(ST_Polygonize(linestring)))) geom, ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) border from ( select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '6' 
order by relation_members.relation_id, relation_members.sequence_id
 ) prov 
group by relation_id
) prov join extra_config_boundaries boundaries on ST_Covers(boundaries.geom, prov.geom) or boundaries.geom = prov.border;


-- Confini delle province di interesse

drop table if exists province_border_geom ;

create table province_border_geom as
select provs_boundaries.* from (
select relation_id, ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) geom from ( select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '6' 
left join relation_tags iso on relation_members.relation_id = iso.relation_id and iso.k = 'ISO3166-2'
where iso.relation_id is null or substring(iso.v,1,2) = 'IT'
order by relation_members.relation_id, relation_members.sequence_id
 ) provs group by relation_id
) provs_boundaries 
join province_centroid_geom provs_centroid on provs_boundaries.relation_id = provs_centroid.relation_id;

-- Corrispondenze tra comuni e province

drop table if exists extra_city_county ;

create table extra_city_county as
select comuni_centroid_geom.relation_id comune, province_short_name.v provincia
from comuni_centroid_geom, province_border_geom, relation_tags province_short_name
where ST_Covers(province_border_geom.geom,comuni_centroid_geom.geom)
and province_border_geom.relation_id = province_short_name.relation_id
and province_short_name.k = 'short_name';

-- Centroidi dei quartieri o frazioni di interesse

drop table if exists suburbs_centroid_geom ;

create table suburbs_centroid_geom as
select suburb.id, suburb.geom, suburb.suburb_type, suburb.suburb_name, comuni_border_geom.relation_id municipality_id
from 
(
-- suburb ways
select ways.id, ST_GeogFromText(ST_AsText(ST_Centroid(ST_GeomFromWKB(ST_AsBinary(ways.linestring))))) geom, 'W'::text suburb_type, way_suburb_name.v suburb_name from ways 
join way_tags boundary on ways.id = boundary.way_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join way_tags admin_level on ways.id = admin_level.way_id and admin_level.k = 'admin_level' and cast(admin_level.v as int) > 8 
join way_tags way_suburb_name on ways.id = way_suburb_name.way_id and way_suburb_name.k = 'name'
union
-- suburb relations
select rsuburbs.*, rel_suburb_name.v suburb_name from 
(
select relation_id id, ST_GeogFromText(ST_AsText(ST_Centroid(ST_Polygonize(linestring)))) geom, 'R'::text suburb_type from ( select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and cast(admin_level.v as int) > 8 
order by relation_members.relation_id, relation_members.sequence_id
 ) sub group by relation_id
) rsuburbs 
join relation_tags rel_suburb_name on rsuburbs.id = rel_suburb_name.relation_id and rel_suburb_name.k = 'name'
union
-- suburb nodes
select id, ST_GeogFromWKB(ST_AsBinary(geom)), 'N'::text suburb_type, nd_suburb_name.v suburb_name from nodes join node_tags on nodes.id = node_tags.node_id and node_tags.k = 'place' and node_tags.v = 'suburb' join node_tags nd_suburb_name on nodes.id = nd_suburb_name.node_id and nd_suburb_name.k = 'name'
) suburb
join comuni_border_geom on ST_Covers(comuni_border_geom.geom, suburb.geom)
;

drop table if exists suburbs_border_geom ;

create table suburbs_border_geom as
select suburb.id, suburb.geom from 
(
-- suburb ways
select ways.id, ST_GeogFromText(ST_AsText(ST_Polygonize(ST_GeomFromWKB(ST_AsBinary(ways.linestring))))) geom from ways 
join way_tags boundary on ways.id = boundary.way_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join way_tags admin_level on ways.id = admin_level.way_id and admin_level.k = 'admin_level' and cast(admin_level.v as int) > 8 
group by ways.id
union
-- suburb relations
select relation_id id, ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) geom from ( select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and cast(admin_level.v as int) > 8 
order by relation_members.relation_id, relation_members.sequence_id
 ) sub group by relation_id
) suburb
join suburbs_centroid_geom on suburb.id = suburbs_centroid_geom.id
;

-- Corrispondenze tra elementi stradali, comuni e quartieri

drop table if exists extra_toponym_city ;

create table extra_toponym_city (
	id serial primary key,
	global_way_id bigint,
	local_way_id int,
	city varchar(255), 		
	suburb varchar(255)		
);

insert into extra_toponym_city(global_way_id, local_way_id, city) 
select highways.global_id global_way_id,
highways.local_id local_way_id,
nome_comune.v city 
from 
(
-- ways in relation roads
select extra_ways.global_id, extra_ways.local_id, 
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.start_node)))) start_pt,
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.end_node)))) end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_ways on rwt.way_id = extra_ways.global_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union
-- ways in relation pedestrian multipolygon 
select extra_ways.global_id, extra_ways.local_id, 
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.start_node)))) start_pt,
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.end_node)))) end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_ways on r_ways.member_id = extra_ways.global_id 
union
-- ways that are roads
select extra_ways.global_id, extra_ways.local_id, 
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.start_node)))) start_pt,
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.end_node)))) end_pt
from way_tags wt
join extra_ways on wt.way_id = extra_ways.global_id
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
) highways
join comuni_border_geom comuni on ST_Covers(comuni.geom, highways.start_pt) or ST_Covers(comuni.geom, highways.end_pt)
join relation_tags nome_comune on comuni.relation_id = nome_comune.relation_id and nome_comune.k = 'name';

update extra_toponym_city 
set suburb = suburb.suburb_name
from (

select i_suburb.global_way_id, i_suburb.local_way_id, suburb_name from (
select highways.global_way_id, highways.local_way_id,
coalesce(way_suburb_name.v, rel_suburb_name.v) suburb_name,
dense_rank() over (partition by highways.global_way_id, highways.local_way_id, coalesce(way_suburb_name.v, rel_suburb_name.v) order by cast(coalesce(way_suburb_level.v, rel_suburb_level.v) as int) desc) suburb_rank
from
(
-- ways in relation roads
select extra_ways.global_id global_way_id, extra_ways.local_id local_way_id, 
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.start_node)))) start_pt,
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.end_node)))) end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_ways on rwt.way_id = extra_ways.global_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union
-- ways in relation pedestrian multipolygon 
select extra_ways.global_id, extra_ways.local_id, 
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.start_node)))) start_pt,
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.end_node)))) end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_ways on r_ways.member_id = extra_ways.global_id 
union
-- ways that are roads
select extra_ways.global_id global_way_id, extra_ways.local_id local_way_id, 
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.start_node)))) start_pt,
ST_GeogFromText(ST_AsText(ST_GeomFromWKB(ST_AsBinary(extra_ways.end_node)))) end_pt
from way_tags wt
join extra_ways on wt.way_id = extra_ways.global_id
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
) highways
join suburbs_border_geom st_end_suburb on ST_Covers(st_end_suburb.geom, highways.start_pt) and ST_Covers(st_end_suburb.geom, highways.end_pt)
left join way_tags way_suburb_name on st_end_suburb.id = way_suburb_name.way_id and way_suburb_name.k = 'name'
left join relation_tags rel_suburb_name on st_end_suburb.id = rel_suburb_name.relation_id and rel_suburb_name.k = 'name'
left join way_tags way_suburb_level on st_end_suburb.id = way_suburb_level.way_id and way_suburb_level.k = 'admin_level'
left join relation_tags rel_suburb_level on st_end_suburb.id = rel_suburb_level.relation_id and rel_suburb_level.k = 'admin_level'

) i_suburb where suburb_rank = 1

) suburb 
where extra_toponym_city.global_way_id = suburb.global_way_id and extra_toponym_city.local_way_id = suburb.local_way_id;

-- Numeri civici ed accessi

drop table if exists extra_tmp_1 ;

create table extra_tmp_1 as
    select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' road_id,
    'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id, 
    r_name.v road_extend_name,
    r_ways_routes.global_way_id a_global_way_id,
    r_ways_routes.local_way_id a_local_way_id,
    r_ways_routes.linestring a_way_route, 
    r_ways_routes.prev_node_id a_start_node_id, 
    r_ways_routes.next_node_id a_end_node_id
    from relations r
    join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
    left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
    left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
    join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
    join ( select global_id global_way_id, local_id local_way_id, ST_MakeLine(start_node,end_node) linestring, prev_node_id, next_node_id from extra_ways ) r_ways_routes on r_ways.member_id = r_ways_routes.global_way_id
    join extra_toponym_city e on r_ways_routes.global_way_id = e.global_way_id and r_ways_routes.local_way_id = e.local_way_id
    join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
    join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
    join relation_tags m_name on m_name.k = 'name' and m_name.v = e.city
    join relations m on m_name.relation_id = m.id
    join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
    join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
    join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
    where COALESCE(r_route.v,'road') = 'road'
    and COALESCE(r_network.v, '--') <> 'e-road' 
    and rwt.v <> 'proposed'
union -- pedestrian (squares)
    select distinct 'OS' || lpad(r.id::text,11,'0') || 'SQ' road_id,
    'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id, 
    r_name.v road_extend_name,
    r_ways_routes.global_way_id a_global_way_id,
    r_ways_routes.local_way_id a_local_way_id,
    r_ways_routes.linestring a_way_route,
    r_ways_routes.prev_node_id a_start_node_id,
    r_ways_routes.next_node_id a_end_node_id
    from relations r
    join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
    join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
    join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
    join ( select global_id global_way_id, local_id local_way_id, ST_MakeLine(start_node,end_node) linestring, prev_node_id, next_node_id from extra_ways ) r_ways_routes on r_ways.member_id = r_ways_routes.global_way_id
    join extra_toponym_city e on r_ways_routes.global_way_id = e.global_way_id and r_ways_routes.local_way_id = e.local_way_id
    join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
    join relation_tags m_name on m_name.k = 'name' and m_name.v = e.city
    join relations m on m_name.relation_id = m.id
    join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
    join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
    join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'

;

drop table if exists extra_tmp_2 ;

create table extra_tmp_2 as 
    select distinct 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' road_id,  
    'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id,
    way_name.v road_extend_name,
    extra_ways.global_way_id a_global_way_id,
    extra_ways.local_way_id a_local_way_id,
    extra_ways.linestring a_way_route,
    extra_ways.prev_node_id a_start_node_id,
    extra_ways.next_node_id a_end_node_id
    from ways 
    join way_tags wt on ways.id = wt.way_id
    join extra_toponym_city e on wt.way_id = e.global_way_id 
    join ( select global_id global_way_id, local_id local_way_id, ST_MakeLine(start_node,end_node) linestring, prev_node_id, next_node_id from extra_ways ) extra_ways on e.global_way_id = extra_ways.global_way_id and e.local_way_id = extra_ways.local_way_id
    join way_tags way_name on wt.way_id = way_name.way_id and way_name.k='name'
    join relation_tags m_name on m_name.k = 'name' and m_name.v = e.city
    join relations m on m_name.relation_id = m.id
    join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
    join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
    join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
    where wt.k = 'highway' 
    and wt.v <> 'proposed';

drop table if exists extra_streetnumbers_on_nodes ;

create table extra_streetnumbers_on_nodes as
select * from (
select distinct 'OS' || lpad(nodes.id::text,11,'0') || 'NN' cn_id, 
       housenumber.v extend_number,
       substring(housenumber.v FROM '[0-9]+') number,
       substring(housenumber.v FROM '[a-zA-Z]+') exponent,
	COALESCE(long_roads.road_id,short_roads.road_id) road_id,
CASE 
WHEN city.v = any ('{Firenze,Genova,Savona}') and housenumber.v ilike '%r%' THEN 'Rosso'
WHEN city.v = any ('{Firenze,Genova,Savona}') and not housenumber.v ilike '%r%' THEN 'Nero'
ELSE 'Privo colore'
END as class_code,
'OS' || lpad(nodes.id::text,11,'0') || 'NE' en_id,  
'Accesso esterno diretto' entry_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat,
CASE WHEN motorcycle.node_id is not null or motorcar.node_id is not null THEN 'Accesso carrabile' ELSE 'Accesso non carrabile' END as porte_cochere, 
CASE WHEN long_roads.road_id is null THEN 'OS' || lpad(short_roads.a_global_way_id::text,11,'0') || 'RE/' || short_roads.a_local_way_id ELSE 'OS' || lpad(long_roads.a_global_way_id::text,11,'0') || 'RE/' || long_roads.a_local_way_id END as re_id,
dense_rank() over (partition by nodes.id order by ST_Distance(nodes.geom, COALESCE(long_roads.a_way_route,nodes.geom))) as long_roads_way_rank,
dense_rank() over (partition by nodes.id order by ST_Distance(nodes.geom, COALESCE(short_roads.a_way_route,nodes.geom))) as short_roads_way_rank,
coalesce(source_rt.v,'Open Street Map') node_source,
coalesce(ref_tag.v,'--') native_node_ref
from nodes
join node_tags housenumber on nodes.id = housenumber.node_id and housenumber.k = 'addr:housenumber'
join node_tags street on nodes.id = street.node_id and street.k = 'addr:street'
join node_tags city on nodes.id = city.node_id and city.k = 'addr:city'
left join node_tags motorcycle on nodes.id = motorcycle.node_id and motorcycle.k = 'motorcycle' and motorcycle.v = 'yes'
left join node_tags motorcar on nodes.id = motorcar.node_id and motorcar.k = 'motorcar' and motorcar.v = 'yes'
left join node_tags source_rt on nodes.id = source_rt.node_id and source_rt.k='source' and source_rt.v='Regione Toscana'
left join node_tags ref_tag on nodes.id = ref_tag.node_id and ref_tag.k='ref' and coalesce(source_rt.v,'--') = 'Regione Toscana'
join 
(
select 'OS' || lpad(comuni_border_geom.relation_id::text,11,'0') || 'CO' id, relation_tags.v m_name, comuni_border_geom.geom
from comuni_border_geom
join relation_tags on comuni_border_geom.relation_id = relation_tags.relation_id and relation_tags.k = 'name' 
) municipalities on ST_Covers(municipalities.geom, nodes.geom)
left join extra_tmp_1 long_roads on municipalities.id = long_roads.municipality_id and ( street.v = long_roads.road_extend_name or coalesce(cast(ref_tag.v as numeric),-1) = long_roads.a_start_node_id or coalesce(cast(ref_tag.v as numeric),-1) = long_roads.a_end_node_id )
left join extra_tmp_2 short_roads on municipalities.id = short_roads.municipality_id and ( street.v = short_roads.road_extend_name or coalesce(cast(ref_tag.v as numeric),-1) = short_roads.a_start_node_id or coalesce(cast(ref_tag.v as numeric),-1) = short_roads.a_end_node_id )
where COALESCE(long_roads.road_id,short_roads.road_id,'--') <> '--' 
) q where long_roads_way_rank = 1 and short_roads_way_rank = 1;

drop table if exists extra_streetnumbers_on_relations ;

create table extra_streetnumbers_on_relations as 
select * from (
select distinct 'OS' || lpad(streetNumbers.member_id::text,11,'0') || 'NN' cn_id,
       housenumber.v extend_number,
       substring(housenumber.v FROM '[0-9]+') number,
       substring(housenumber.v FROM '[a-zA-Z]+') exponent,
COALESCE(super_road.road_id, pedestrian_super_road.road_id, 'OS' || lpad(road.member_id::text,11,'0') || 'SR') road_id,
CASE 
WHEN COALESCE(city.v,'--') = any ('{Firenze,Genova,Savona}') and housenumber.v ilike '%r%' THEN 'Rosso'
WHEN COALESCE(city.v,'--') = any ('{Firenze,Genova,Savona}') and not housenumber.v ilike '%r%' THEN 'Nero'
ELSE 'Privo colore'
END as class_code,
'OS' || lpad(streetNumberNodes.id::text,11,'0') || 'NE' en_id,  
'Accesso esterno diretto' entry_type,
ST_X(streetNumberNodes.geom) long,
ST_Y(streetNumberNodes.geom) lat,
CASE WHEN motorcycle.node_id is not null or motorcar.node_id is not null THEN 'Accesso carrabile' ELSE 'Accesso non carrabile' END as porte_cochere,
'OS' || lpad(road.member_id::text,11,'0') || 'RE/' || extra_ways.local_id re_id,
dense_rank() over (partition by streetNumbers.member_id, extra_ways.global_id order by ST_Distance(streetNumberNodes.geom, ST_MakeLine(extra_ways.start_node,extra_ways.end_node))) as road_element_rank
from relations
join relation_tags associatedStreet on relations.id = associatedStreet.relation_id and associatedStreet.k = 'type' and associatedStreet.v = 'associatedStreet'
left join relation_tags city on relations.id = city.relation_id and city.k = 'addr:city'
join relation_members streetNumbers on relations.id = streetNumbers.relation_id and streetNumbers.member_type = 'N'
join nodes streetNumberNodes on streetNumbers.member_id = streetNumberNodes.id
left join node_tags motorcycle on streetNumberNodes.id = motorcycle.node_id and motorcycle.k = 'motorcycle' and motorcycle.v = 'yes'
left join node_tags motorcar on streetNumberNodes.id = motorcar.node_id and motorcar.k = 'motorcar' and motorcar.v = 'yes'
join node_tags housenumber on housenumber.node_id = streetNumbers.member_id and housenumber.k = 'addr:housenumber'
join relation_members road on relations.id = road.relation_id and road.member_type = 'W'
join extra_ways on extra_ways.global_id = road.member_id
join extra_toponym_city e on road.member_id = e.global_way_id and extra_ways.local_id = e.local_way_id
left join 
(
select distinct r_ways.member_id way_id,
       'OS' || lpad(r.id::text,11,'0') || 'LR' road_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
) super_road on road.member_id = super_road.way_id 
left join
(
select distinct r_ways.member_id way_id,
       'OS' || lpad(r.id::text,11,'0') || 'SQ' road_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
) pedestrian_super_road on road.member_id = pedestrian_super_road.way_id 
) q where road_element_rank = 1;

drop table if exists extra_streetnumbers_on_junctions ;

create table extra_streetnumbers_on_junctions as
select distinct 'OS' || lpad(nodes.id::text,11,'0') || 'NN' cn_id,
       housenumber.v extend_number,
       substring(housenumber.v FROM '[0-9]+') number,
       substring(housenumber.v FROM '[a-zA-Z]+') exponent,
       COALESCE(super_road.road_id, pedestrian_super_road.road_id, simple_road.road_id) road_id,
CASE 
WHEN e.city = any ('{Firenze,Genova,Savona}') and housenumber.v ilike '%r%' THEN 'Rosso'
WHEN e.city = any ('{Firenze,Genova,Savona}') and not housenumber.v ilike '%r%' THEN 'Nero'
ELSE 'Privo colore'
END as class_code,
'OS' || lpad(nodes.id::text,11,'0') || 'NE' en_id,  
'Accesso esterno diretto' entry_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat,
CASE WHEN motorcycle.node_id is not null or motorcar.node_id is not null THEN 'Accesso carrabile' ELSE 'Accesso non carrabile' END as porte_cochere,
'OS' || lpad(extra_ways.global_id::text,11,'0') || 'RE/' || extra_ways.local_id re_id
from nodes 
join node_tags housenumber on nodes.id = housenumber.node_id and housenumber.k = 'addr:housenumber'
left join node_tags motorcycle on nodes.id = motorcycle.node_id and motorcycle.k = 'motorcycle' and motorcycle.v = 'yes'
left join node_tags motorcar on nodes.id = motorcar.node_id and motorcar.k = 'motorcar' and motorcar.v = 'yes'
join way_nodes junctions on nodes.id = junctions.node_id
join extra_ways on junctions.way_id = extra_ways.global_id and extra_ways.start_node = nodes.geom
join extra_toponym_city e on e.global_way_id = extra_ways.global_id and e.local_way_id = extra_ways.local_id 
left join 
(
select distinct r_ways.member_id way_id,
       'OS' || lpad(r.id::text,11,'0') || 'LR' road_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
) super_road on junctions.way_id = super_road.way_id 
left join 
(
  select distinct r_ways.member_id way_id,
       'OS' || lpad(r.id::text,11,'0') || 'SQ' road_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
) pedestrian_super_road on junctions.way_id = pedestrian_super_road.way_id 
left join
(
select distinct 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' road_id,
wt.way_id osm_road_id
  from way_tags wt
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null

) simple_road on junctions.way_id = simple_road.osm_road_id
where COALESCE(super_road.road_id, pedestrian_super_road.road_id, simple_road.road_id, '--') <> '--';

/***********************************************************************
************* PREPARAZIONE DEI DATI PER SPARQLIFY **********************
***********************************************************************/

/*******************************
*********** Province ***********
*******************************/

/********** Province URI **********/

drop table if exists ProvinceURI ;

Create table ProvinceURI As
  select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'PR' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '6'
  join province_centroid_geom prov_of_interest on r.id = prov_of_interest.relation_id 
  join extra_config_graph cfg on 1=1;

/********** Province.Identifier **********/

drop table if exists ProvinceIdentifier ;

Create table ProvinceIdentifier As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'PR' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '6'
  join province_centroid_geom prov_of_interest on r.id = prov_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Province.Name **********/

drop table if exists ProvinceName ;

Create Table ProvinceName As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'PR' id,
       r_name.v p_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '6'
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join province_centroid_geom prov_of_interest on r.id = prov_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Province.Alternative **********/

drop table if exists ProvinceAlternative ;

Create Table ProvinceAlternative As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'PR' id,
       r_short_name.v alternative
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '6'
  join relation_tags r_short_name on r.id = r_short_name.relation_id and r_short_name.k = 'short_name'
  join province_centroid_geom prov_of_interest on r.id = prov_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Province.hasMunicipality **********/

drop table if exists ProvinceHasMunicipality ;

Create Table ProvinceHasMunicipality As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'PR' id,
       'OS' || lpad(e.comune::text,11,'0') || 'CO' has_municipality
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '6'
  join relation_tags r_short_name on r.id = r_short_name.relation_id and r_short_name.k = 'short_name'
  join province_centroid_geom prov_of_interest on r.id = prov_of_interest.relation_id 
  join extra_city_county e on r_short_name.v = e.provincia
  join extra_config_graph cfg on 1=1
;

/***********************************
*********** Municipality ***********
***********************************/

/********** Municipality URI **********/

drop table if exists MunicipalityURI ;

Create Table MunicipalityURI As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'CO' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '8'
  join comuni_centroid_geom com_of_interest on r.id = com_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Municipality.Identifier **********/

drop table if exists MunicipalityIdentifier ;

Create Table MunicipalityIdentifier As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'CO' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '8'
  join comuni_centroid_geom com_of_interest on r.id = com_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Municipality.Name **********/

drop table if exists MunicipalityName ;

Create Table MunicipalityName As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'CO' id,
       r_name.v p_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '8'
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join comuni_centroid_geom com_of_interest on r.id = com_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Municipality.Alternative **********/

drop table if exists MunicipalityAlternative ;

Create Table MunicipalityAlternative As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'CO' id,
       r_catasto.v alternative
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '8'
  join relation_tags r_catasto on r.id = r_catasto.relation_id and r_catasto.k = 'ref:catasto'
  join comuni_centroid_geom com_of_interest on r.id = com_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Municipality.isPartOfProvince **********/

drop table if exists MunicipalityIsPartOfProvince ;

Create Table MunicipalityIsPartOfProvince As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'CO' id,
       'OS' || lpad(pr.id::text,11,'0') || 'PR' province_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '8'
  join comuni_centroid_geom com_of_interest on r.id = com_of_interest.relation_id 
  join extra_city_county e on r.id = e.comune
  join relation_tags p_short_tag on p_short_tag.k = 'short_name' and p_short_tag.v = e.provincia
  join relations pr on p_short_tag.relation_id = pr.id
  join relation_tags pr_type on pr.id = pr_type.relation_id and pr_type.k = 'type' and pr_type.v = 'boundary'
  join relation_tags pr_boundary on pr.id = pr_boundary.relation_id and pr_boundary.k = 'boundary' and pr_boundary.v = 'administrative'
  join relation_tags pr_admin_level on pr.id = pr_admin_level.relation_id and pr_admin_level.k = 'admin_level' and pr_admin_level.v = '6'
  join extra_config_graph cfg on 1=1
;

/***************************
********** Hamlet **********
***************************/

drop table if exists Hamlet ;

Create Table Hamlet As
select distinct graph_uri, 'OS' || lpad(m.id::text,11,'0') || 'CO' || '/' || regexp_replace(t.suburb,'[^a-zA-Z]', '', 'g') hamlet_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id,
       t.suburb hamlet_name,
	ST_X(suburbs_centroid_geom.geom::geometry) long, --
	ST_Y(suburbs_centroid_geom.geom::geometry) lat --
  from extra_toponym_city t 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join suburbs_centroid_geom on suburbs_centroid_geom.municipality_id = m.id and suburbs_centroid_geom.suburb_name = t.suburb --
  join extra_config_graph cfg on 1=1
  where not ((t.suburb = '') IS NOT FALSE)
;

insert into Hamlet(graph_uri, hamlet_id, municipality_id, hamlet_name, long, lat) 
select distinct graph_uri, 
'OS' || lpad(m.relation_id::text,11,'0') || 'CO' || '/' || regexp_replace(place_name.v,'[^a-zA-Z]', '', 'g') hamlet_id,
'OS' || lpad(m.relation_id::text,11,'0') || 'CO' municipality_id,
place_name.v hamlet_name,
ST_X(nodes.geom) long, 
ST_Y(nodes.geom) lat
from nodes
join node_tags place_suburb on nodes.id = place_suburb.node_id and place_suburb.k = 'place' and place_suburb.v = 'suburb'
join node_tags place_name on nodes.id = place_name.node_id and place_name.k = 'name'
join comuni_border_geom m on ST_Covers(m.geom, nodes.geom)
join extra_config_graph cfg on 1=1;

/**************************
*********** Road **********
**************************/

/********** Road(RELATION) URI **********/

drop table if exists RoadRelationURI ;

Create Table RoadRelationURI As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
union -- pedestrian relations (squares)
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
;

/********** Road(RELATION).Identifier **********/

drop table if exists RoadRelationIdentifier ;

Create Table RoadRelationIdentifier As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
union -- pedestrian relations (squares)
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
;

/********** Road(RELATION).RoadType **********/

drop table if exists RoadRelationType ;

Create Table RoadRelationType As
select graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' id,
       r_name.v extend_name,
       max(g.naming) road_type
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join extra_generic_namings g on r_name.v ILIKE g.naming || '%'
  join extra_config_graph cfg on 1=1
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
 group by graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR', r_name.v
union -- pedestrian relations (squares)
select graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' id,
       r_name.v extend_name,
       max(g.naming) road_type
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join extra_generic_namings g on r_name.v ILIKE g.naming || '%'
  join extra_config_graph cfg on 1=1
 group by graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ', r_name.v

;  

/********** Road(RELATION).RoadName **********/

drop table if exists RoadRelationName ;

Create Table RoadRelationName As
select graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' id,
       r_name.v extend_name,
       trim(substring(r_name.v, 1+char_length(max(coalesce(g.naming,''))))) road_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join extra_config_graph cfg on 1=1
  left join extra_generic_namings g on r_name.v ILIKE g.naming || '%'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
 group by graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR', r_name.v
union -- pedestrian relations (squares)
select graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' id,
       r_name.v extend_name,
       trim(substring(r_name.v, 1+char_length(max(coalesce(g.naming,''))))) road_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join extra_config_graph cfg on 1=1
  left join extra_generic_namings g on r_name.v ILIKE g.naming || '%'
 group by graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ', r_name.v
;

/********** Road(RELATION).ExtendName **********/

drop table if exists RoadRelationExtendName ;

Create Table RoadRelationExtendName As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' id,
       r_name.v extend_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join extra_config_graph cfg on 1=1
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union -- pedestrian relations (squares)
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' id,
       r_name.v extend_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join extra_config_graph cfg on 1=1
;

/********** Road(RELATION).Alternative **********/

drop table if exists RoadRelationAlternative ;

Create Table RoadRelationAlternative As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' id,
       r_alt_name.v alternative
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_alt_name on r.id = r_alt_name.relation_id and r_alt_name.k = 'alt_name'
  join extra_config_graph cfg on 1=1
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union -- pedestrian relations (squares)
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' id,
       r_alt_name.v alternative
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join relation_tags r_alt_name on r.id = r_alt_name.relation_id and r_alt_name.k = 'alt_name'
  join extra_config_graph cfg on 1=1
;

/*************************************************
*********** Generazione dei RoadElement **********
*********** a partire dalle Relation    **********
*********** che rappresentano toponimi  **********
*********** e legatura alla Road        **********
*************************************************/

drop table if exists RoadRelationElementType ;

Create Table RoadRelationElementType As
select distinct graph_uri, 'OS' || lpad(extra_ways.global_id::text,11,'0') || 'RE/' || extra_ways.local_id road_element_id,
       'OS' || lpad(r.id::text,11,'0') || 'LR' road_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join extra_ways on extra_ways.global_id = r_ways.member_id
  join extra_config_graph cfg on 1=1
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union
select distinct graph_uri, 'OS' || lpad(extra_ways.global_id::text,11,'0') || 'RE/' || extra_ways.local_id road_element_id,
       'OS' || lpad(r.id::text,11,'0') || 'SQ' road_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
  join extra_ways on extra_ways.global_id = r_ways.member_id
  join extra_config_graph cfg on 1=1
;

/********** Road(RELATION).inMunicipalityOf  *********/

drop table if exists RoadRelationInMunicipalityOf ;

Create Table RoadRelationInMunicipalityOf As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' road_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city t on r_ways.member_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join extra_config_graph cfg on 1=1
where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union 
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' road_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city t on r_ways.member_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join extra_config_graph cfg on 1=1
;

/********** Road(RELATION).inHamletOf  ***************/

drop table if exists RoadRelationInHamletOf ;

Create Table RoadRelationInHamletOf As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'LR' road_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' || '/' || regexp_replace(t.suburb,'[^a-zA-Z]', '', 'g') hamlet_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city t on r_ways.member_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join extra_config_graph cfg on 1=1
where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
   AND not ((t.suburb = '') IS NOT FALSE)
union
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'SQ' road_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' || '/' || regexp_replace(t.suburb,'[^a-zA-Z]', '', 'g') hamlet_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city t on r_ways.member_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join extra_config_graph cfg on 1=1
where not ((t.suburb = '') IS NOT FALSE);

/********** Road(WAY) URI **********************/
/********** Road(WAY).ContainsElement **********/

drop table if exists RoadWayURI ;

Create Table RoadWayURI As
select distinct graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' id,
       'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id eid  
  from way_tags wt
  join extra_toponym_city e on wt.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
;

/********** Road(WAY).Identifier **********/

drop table if exists RoadWayIdentifier ;

Create Table RoadWayIdentifier As
select distinct graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' id  
  from way_tags wt
  join extra_toponym_city e on wt.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
;

/********** Road(WAY).RoadType **********/

drop table if exists RoadWayType ;

Create Table RoadWayType As
select graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' id,  
       way_name.v extend_name,
       max(g.naming) road_type
  from way_tags wt
  join extra_toponym_city e on wt.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
  join way_tags way_name on wt.way_id = way_name.way_id and way_name.k='name'
  join extra_generic_namings g on way_name.v ILIKE g.naming || '%'
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
 group by graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR', way_name.v
;

/********** Road(WAY).RoadName **********/

drop table if exists RoadWayName ;

Create Table RoadWayName As
select graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' id,  
       way_name.v extend_name,
       trim(substring(way_name.v, 1+char_length(max(coalesce(g.naming,''))))) road_name
  from way_tags wt
  join extra_toponym_city e on wt.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
  join way_tags way_name on wt.way_id = way_name.way_id and way_name.k='name'
  left join extra_generic_namings g on way_name.v ILIKE g.naming || '%'
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
 group by graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR', way_name.v
;

/********** Road(WAY).ExtendName **********/

drop table if exists RoadWayExtendName ;

Create Table RoadWayExtendName As
select distinct graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' id,  
       way_name.v extend_name
  from way_tags wt
  join extra_toponym_city e on wt.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
  join way_tags way_name on wt.way_id = way_name.way_id and way_name.k='name'
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
;

/********** Road(WAY).Alternative **********/

drop table if exists RoadWayAlternative ;

Create Table RoadWayAlternative As
select distinct graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' id,  
       way_alt_name.v alternative
  from way_tags wt
  join extra_toponym_city e on wt.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
  join way_tags way_alt_name on wt.way_id = way_alt_name.way_id and way_alt_name.k='alt_name'
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
;

/********** Road(WAY).InMunicipalityOf **********/

drop table if exists RoadWayInMunicipalityOf ;

Create Table RoadWayInMunicipalityOf As
select distinct graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' road_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id
  from way_tags wt
  join extra_toponym_city t on wt.way_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null;

/********** Road(WAY).InHamletOf ****************/

drop table if exists RoadWayInHamletOf ;

Create Table RoadWayInHamletOf As
select distinct graph_uri, 'OS' || lpad(wt.way_id::text,11,'0') || 'SR' road_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' || '/' || regexp_replace(t.suburb,'[^a-zA-Z]', '', 'g') hamlet_id
  from way_tags wt
  join extra_toponym_city t on wt.way_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join extra_config_graph cfg on 1=1
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
   AND not ((t.suburb = '') IS NOT FALSE);

/**********************************
*********** RoadElement ***********
**********************************/

/********** RoadElement.ElementType **********/

drop table if exists RoadElementType_ ;

Create Table RoadElementType_ As
select graph_uri, t.global_way_id,
substring(min(case 
when highway.v = 'service' and coalesce(way_tags.k,'--') = 'service' and coalesce(way_tags.v,'--') = 'parking_aisle' 
then '01 di parcheggio' 
when highway.v = any ('{motorway,trunk,primary,secondary,tertiary,unclassified,residential,service}') 
then '02 di tronco carreggiata' 
when highway.v = any ('{motorway_link,trunk_link,primary_link,secondary_link,tertiary_link,escape,motorway_junction}') 
then '03 raccordo, bretella, svincolo' 
when coalesce(way_tags.k,'--') = 'amenity' and coalesce(way_tags.v,'--') = 'parking' 
then '04 di parcheggio strutturato' 
when highway.v = any ('{mini_roundabout,turning_cirle,turning_loop}') or ( coalesce(way_tags.k,'--') = 'junction' and coalesce(way_tags.v,'--') = 'roundabout')
then '05 di rotatoria'
when coalesce(way_tags.k,'--') = 'barrier' and coalesce(way_tags.v,'--') = 'toll_booth' 
then '06 di casello/barriera autostradale' 
when coalesce(way_tags.k,'--') = 'area' and coalesce(way_tags.v,'--') = 'yes' 
then '07 di piazza' 
when highway.v = any ('{pedestrian,living_street,footway,bridleway,steps,path,crossing,elevator}') 
then '08 pedonale' 
when coalesce(way_tags.k,'--') = 'railway' and coalesce(way_tags.v,'--') = 'level_crossing' 
then '09 di passaggio a livello' 
when highway.v = any ('{bus_stop,emergency_access_point,rest_area,services}') 
then '10 in area di pertinenza'
when coalesce(way_tags.k,'--') = 'lanes' and coalesce(way_tags.v,'--') is not null 
then '11 di area a traffico strutturato' 
else '12 di area a traffico non strutturato'
end),4) as element_type
from way_tags highway
  join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city ) t on highway.way_id = t.global_way_id 
left join way_tags on highway.way_id = way_tags.way_id and way_tags.k <> 'highway'
left join way_nodes on highway.way_id = way_nodes.way_id 
left join node_tags on way_nodes.node_id = node_tags.node_id
where highway.k = 'highway' 
and highway.v <> 'proposed'
group by graph_uri, t.global_way_id
;

drop table if exists RoadElementType;

create table RoadElementType as
select RoadElementType_.*, 'OS' || lpad(extra_ways.global_id::text,11,'0') || 'RE/' || extra_ways.local_id id
from RoadElementType_
join extra_ways on RoadElementType_.global_way_id = extra_ways.global_id;

/********** RoadElement.ElementClass **********/

drop table if exists RoadElementClass ;

Create Table RoadElementClass As
select distinct graph_uri, 'OS' || lpad(t.global_way_id::text,11,'0') || 'RE/' || t.local_way_id id,  
case 
when highway.v = 'motorway' 
then 'autostrada'
when highway.v = 'trunk' 
then 'extraurbana principale'
when highway.v = any ('{primary,secondary,tertiary}') 
then 'extraurbana secondaria'
when highway.v = 'unclassified' 
then 'urbana di scorrimento'
when highway.v = 'residential' 
then 'urbana di quartiere'
else 'locale/vicinale/privata ad uso privato'
end as element_class
from way_tags highway
  join extra_config_graph cfg on 1=1
join extra_toponym_city t on highway.way_id = t.global_way_id 
where highway.k = 'highway' 
and highway.v <> 'proposed'
;

/********** RoadElement.Composition **********/

drop table if exists RoadElementComposition ;

Create Table RoadElementComposition As
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  
       case when t.relation_id is not null or highway.v = 'motorway' or highway.v = 'trunk' then 'carreggiate separate' else 'carreggiata unica' end as composition
from way_tags highway
  join extra_config_graph cfg on 1=1
join extra_toponym_city e on highway.way_id = e.global_way_id 
left join relation_members m on highway.way_id = m.member_id and m.member_type = 'W'
left join relation_tags t on m.relation_id = t.relation_id and t.k = 'type' and t.v = 'double_carriageway'
where highway.k = 'highway'
and highway.v <> 'proposed'
;

/********** RoadElement.elemLocation **********/

drop table if exists RoadElementLocation ;

Create Table RoadElementLocation As
select graph_uri, elq.id, case when rate = 1110 then 'galleria, ponte e rampa' when rate = 1100 then 'ponte e rampa' when rate = 1010 then 'ponte e galleria' when rate = 1000 then 'ponte' when rate = 110 then 'galleria e rampa' when rate = 100 then 'rampa' when rate = 10 then 'galleria' else 'a raso' end as elem_location 
from (
select 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  
       sum(case
       when way_tags.k = 'tunnel' and way_tags.v = 'yes' then 10
       when way_tags.k = 'highway' and way_tags.v = any ('{motorway_link,trunk_link,primary_link,secondary_link,tertiary_link,escape,motorway_junction}')  then 100
       when ( way_tags.k = 'bridge' and way_tags.v = 'yes' ) or t.relation_id is not null then 1000
       end) as rate
from way_tags highway

join extra_toponym_city e on highway.way_id = e.global_way_id 
left join way_tags on highway.way_id = way_tags.way_id and way_tags.k <> 'highway'
left join relation_members m on highway.way_id = m.member_id and m.member_type = 'W'
left join relation_tags t on m.relation_id = t.relation_id and t.k = 'type' and t.v = 'bridge'
where highway.k = 'highway'
and highway.v <> 'proposed'
group by 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id
) elq
  join extra_config_graph cfg on 1=1
;

/********** RoadElement.Length **********/

drop table if exists RoadElementLength ;

Create Table RoadElementLength As
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  
	round(ST_Distance(extra_ways.start_node::geography,extra_ways.end_node::geography)) length
from way_tags highway
  join extra_config_graph cfg on 1=1
join extra_toponym_city e on highway.way_id = e.global_way_id 
join extra_ways on extra_ways.global_id = e.global_way_id and extra_ways.local_id = e.local_way_id
where highway.k = 'highway'
and highway.v <> 'proposed'
;

/********** RoadElement.Width **********/

drop table if exists RoadElementWidth ;

Create Table RoadElementWidth As
select distinct graph_uri, wq.id, 
case 
when width > 7 then 'maggiore di 7 mt'
when width > 3.5 then 'tra 3,5 mt e 7 mt'
when width > 0 then 'minore di 3,5 mt'
else 'non rilevato'
end as width
from (
select 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  
case 
when w.v is not null and trim(replace(replace(w.v, 'm',''),',','.')) ~ '^[0-9\.]+$' then trim(replace(replace(w.v, 'm',''),',','.'))::float
when ew.v is not null and trim(replace(replace(ew.v, 'm',''),',','.')) ~ '^[0-9\.]+$' then trim(replace(replace(ew.v, 'm',''),',','.'))::float
else -1
end as width
from way_tags highway
join extra_toponym_city e on highway.way_id = e.global_way_id 
left join way_tags w on highway.way_id = w.way_id and w.k = 'width' 
left join way_tags ew on highway.way_id = ew.way_id and ew.k = 'est_width' 
where highway.k = 'highway'
and highway.v <> 'proposed'
) wq
  join extra_config_graph cfg on 1=1
;

/********** RoadElement.OperatingStatus **********/

drop table if exists RoadElementOperatingStatus ;

Create Table RoadElementOperatingStatus As
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  
case 
when highway.v = 'construction' then 'in construzione'
when coalesce(abandoned.v,'--') = 'yes' or coalesce(disused.v,'--') = 'yes' then 'in disuso'
else 'in esercizio'
end as operating_status
from way_tags highway
  join extra_config_graph cfg on 1=1
join extra_toponym_city e on highway.way_id = e.global_way_id 
left join way_tags abandoned on highway.way_id = abandoned.way_id and abandoned.k = 'abandoned'
left join way_tags disused on highway.way_id = disused.way_id and disused.k = 'disused'
where highway.k = 'highway'
and highway.v <> 'proposed'
;

/********** RoadElement.SpeedLimit **********/

drop table if exists RoadElementSpeedLimit ;

Create Table RoadElementSpeedLimit As
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  maxspeed.v speed_limit
from way_tags highway
join extra_toponym_city e on highway.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
join way_tags maxspeed on highway.way_id = maxspeed.way_id and maxspeed.k = 'maxspeed' and maxspeed.v ~ '^[0-9\.]+$'
where highway.k = 'highway'
and highway.v <> 'proposed'
;

/********** RoadElement.TrafficDir **********/

drop table if exists RoadElementTrafficDir ;

Create Table RoadElementTrafficDir As
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id,  
case 
when highway.v = 'construction' or coalesce(access.v,'--') = 'no' then 'tratto stradale chiuso in entrambe le direzioni'
when coalesce(oneway.v,'--') = any('{1,yes}') then 'tratto stradale aperto nella direzione positiva (da giunzione NOD_INI a giunzione NOD_FIN)'
when coalesce(oneway.v,'--') = '-1' then 'tratto stradale aperto nella direzione negativa (da giunzione NOD_FIN a giunzione NOD_INI)'
else 'tratto stradale aperto in entrambe le direzioni (default)'
end as traffic_dir
from way_tags highway
join extra_toponym_city e on highway.way_id = e.global_way_id 
  join extra_config_graph cfg on 1=1
left join way_tags access on highway.way_id = access.way_id and access.k = 'access'
left join way_tags oneway on highway.way_id = oneway.way_id and oneway.k = 'oneway'
where highway.k = 'highway'
and highway.v <> 'proposed'
;

/********** RoadElement.ManagingAuthority **********/

drop table if exists RoadElementManagingAuthority ;

Create Table RoadElementManagingAuthority As
select distinct graph_uri, 'OS' || lpad(t.global_way_id::text,11,'0') || 'RE/' || t.local_way_id way_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id
  from way_tags wt
  join extra_config_graph cfg on 1=1
  join extra_toponym_city t on wt.way_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
   where wt.k = 'highway' 
   and wt.v <> 'proposed'
union -- pedestrian (squares)
select distinct graph_uri, 'OS' || lpad(t.global_way_id::text,11,'0') || 'RE/' || t.local_way_id way_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' municipality_id
  from ways wt
  join extra_config_graph cfg on 1=1
  join extra_toponym_city t on wt.id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join relation_members r on wt.id = r.member_id and r.member_type = 'W' 
  join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
;

/********** RoadElement.InHamletOf *****************/

drop table if exists RoadElementHamlet ;

Create Table RoadElementHamlet As
select distinct graph_uri, 'OS' || lpad(t.global_way_id::text,11,'0') || 'RE/' || t.local_way_id way_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' || '/' || regexp_replace(t.suburb,'[^a-zA-Z]', '', 'g') hamlet_id
  from way_tags wt
  join extra_config_graph cfg on 1=1
  join extra_toponym_city t on wt.way_id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
   where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and not ((t.suburb = '') IS NOT FALSE)
union -- pedestrian (squares)
select distinct graph_uri, 'OS' || lpad(t.global_way_id::text,11,'0') || 'RE/' || t.local_way_id way_id,
       'OS' || lpad(m.id::text,11,'0') || 'CO' || '/' || regexp_replace(t.suburb,'[^a-zA-Z]', '', 'g') hamlet_id
  from ways wt
  join extra_config_graph cfg on 1=1
  join extra_toponym_city t on wt.id = t.global_way_id 
  join relation_tags m_name on m_name.k = 'name' and m_name.v = t.city
  join relations m on m_name.relation_id = m.id
  join relation_tags m_type on m.id = m_type.relation_id and m_type.k = 'type' and m_type.v = 'boundary'
  join relation_tags m_boundary on m.id = m_boundary.relation_id and m_boundary.k = 'boundary' and m_boundary.v = 'administrative'
  join relation_tags m_admin_level on m.id = m_admin_level.relation_id and m_admin_level.k = 'admin_level' and m_admin_level.v = '8'
  join relation_members r on wt.id = r.member_id and r.member_type = 'W' 
  join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  where not ((t.suburb = '') IS NOT FALSE);

/********** RoadElement.Route **********/

drop table if exists RoadElementRoute ;

Create Table RoadElementRoute As
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id, ST_MakeLine(extra_ways.start_node,extra_ways.end_node) route
from ways 
  join extra_config_graph cfg on 1=1
join extra_toponym_city e on ways.id = e.global_way_id 
join way_tags highway on ways.id = highway.way_id and highway.k = 'highway' and highway.v <> 'proposed'
join extra_ways on global_id = e.global_way_id and local_id = e.local_way_id
union -- pedestrian (squares)
select distinct graph_uri, 'OS' || lpad(e.global_way_id::text,11,'0') || 'RE/' || e.local_way_id id, ST_MakeLine(extra_ways.start_node,extra_ways.end_node) route
from ways 
join extra_config_graph cfg on 1=1
join extra_toponym_city e on ways.id = e.global_way_id 
join extra_ways on global_id = e.global_way_id and local_id = e.local_way_id
join relation_members r on ways.id = r.member_id and r.member_type = 'W' 
join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
;

/********** RoadElement.StartsAtNode **********/

drop table if exists RoadElementStartsAtNode ;

Create Table RoadElementStartsAtNode As
select distinct graph_uri,
'OS' || lpad(highway.way_id::text,11,'0') || 'RE/' || way_nodes.sequence_id way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' start_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from way_tags highway 
join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.way_id = e.global_way_id 
join way_nodes on highway.way_id = way_nodes.way_id 
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.way_id = extra_ways.global_id and way_nodes.sequence_id = extra_ways.local_id
where highway.k = 'highway' and highway.v <> 'proposed'
union -- pedestrian (squares)
select distinct graph_uri,
'OS' || lpad(highway.id::text,11,'0') || 'RE/' || way_nodes.sequence_id way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' start_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from ways highway 
join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.id = e.global_way_id 
join way_nodes on highway.id = way_nodes.way_id 
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.id = extra_ways.global_id and way_nodes.sequence_id = extra_ways.local_id
join relation_members r on highway.id = r.member_id and r.member_type = 'W' 
join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
;

/********** RoadElement.EndsAtNode **********/

drop table if exists RoadElementEndsAtNode ;

Create Table RoadElementEndsAtNode As
select distinct graph_uri,
'OS' || lpad(highway.way_id::text,11,'0') || 'RE/' || (way_nodes.sequence_id-1) way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' end_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from way_tags highway 
  join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.way_id = e.global_way_id 
join way_nodes on highway.way_id = way_nodes.way_id and way_nodes.sequence_id > 0
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.way_id = extra_ways.global_id and way_nodes.sequence_id - 1 = extra_ways.local_id
where highway.k = 'highway' and highway.v <> 'proposed'
union -- pedestrian (squares)
select distinct graph_uri,
'OS' || lpad(highway.id::text,11,'0') || 'RE/' || (way_nodes.sequence_id-1) way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' end_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from ways highway 
  join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.id = e.global_way_id 
join way_nodes on highway.id = way_nodes.way_id and way_nodes.sequence_id > 0
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.id = extra_ways.global_id and way_nodes.sequence_id - 1 = extra_ways.local_id
join relation_members r on highway.id = r.member_id and r.member_type = 'W' 
join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'

;

/****************************************
*********** Istanziazione di ************
*********** StreetNumber e Entry ********
*********** legati con la Road **********
*********** attraverso l'indirizzo ******
*********** indicato sul nodo ***********
****************************************/

drop table if exists NodeStreetNumberRoad ;

Create Table NodeStreetNumberRoad As
select * from extra_streetnumbers_on_nodes
  join extra_config_graph cfg on 1=1
  join extra_config_civic_num on 1=1
  where civic_num_source = node_source
;

/****************************************
*********** Istanziazione di ************
*********** StreetNumber e Entry ********
*********** legati con la Road **********
*********** attraverso le Relation ******
*********** di tipo associateStreet *****
****************************************/

drop table if exists RelationStreetNumberRoad ;

Create Table RelationStreetNumberRoad As
select * from extra_streetnumbers_on_relations
  join extra_config_graph cfg on 1=1
  join extra_config_civic_num on 1=1
  where civic_num_source = 'Open Street Map'
;

/****************************************
*********** Istanziazione di ************
*********** StreetNumber e Entry ********
*********** legati con la Road **********
*********** attraverso il fatto che il **
*********** nodo è giunzione della Way **
****************************************/

drop table if exists NodeStreetNumberRoad2 ;

Create Table NodeStreetNumberRoad2 As
select * from extra_streetnumbers_on_junctions
  join extra_config_graph cfg on 1=1
  join extra_config_civic_num on 1=1
  where civic_num_source = 'Open Street Map'
;

/********************************
*********** Milestone ***********
********************************/

drop table if exists Milestone ;

Create Table Milestone As
select graph_uri, 'OS' || lpad(nodes.id::text,11,'0') || 'MI' ml_id, 
       distance.v distance, 
       ST_Y(nodes.geom) lat, 
       ST_X(nodes.geom) long, 
       'OS' || lpad(way_nodes.way_id::text,11,'0') || 'RE/' || way_nodes.sequence_id re_id
from nodes 
join extra_config_graph cfg on 1=1
join node_tags milestone on nodes.id = milestone.node_id and milestone.k = 'highway' and milestone.v = 'milestone'
join node_tags distance on nodes.id = distance.node_id and distance.k = 'distance'
join way_nodes on way_nodes.node_id = milestone.node_id
join extra_toponym_city e on e.global_way_id = way_nodes.way_id 
;

/********************************
*********** EntryRule ***********
********************************/

drop table if exists EntryRule ;

Create Table EntryRule As
select *, 'OS' || lpad(q.way_id::text,11,'0') || 'RE/' || extra_ways.local_id re_id from (
select 'OS' || lpad(ways.id::text,11,'0') || 'NA' rl_id,
       --'OS' || lpad(ways.id::text,11,'0') || 'RE' re_id,
	ways.id way_id,
CASE 
WHEN temp_access.v = 'no' THEN 'Direzione flusso di traffico' 
WHEN temp_access.v is null and temp_oneway.v = 'yes' THEN 'Direzione flusso di traffico'
WHEN temp_access.v is null and temp_oneway.v = '-1' THEN 'Direzione flusso di traffico'
WHEN temp_access.v = 'destination' and temp_oneway.v = 'yes' THEN 'Passaggio bloccato'
WHEN temp_access.v = 'destination' and temp_oneway.v = '-1' THEN 'Passaggio bloccato'
ELSE '--'
END as restriction_type,
CASE 
WHEN temp_access.v = 'no' THEN 'Chiusa in entrambe le direzioni' 
WHEN temp_access.v is null and temp_oneway.v = 'yes' THEN 'Chiusa in direzione negativa'
WHEN temp_access.v is null and temp_oneway.v = '-1' THEN 'Chiusa in direzione positiva'
WHEN temp_access.v = 'destination' and temp_oneway.v = 'yes' THEN 'Blocco fisico sulla giunzione finale'
WHEN temp_access.v = 'destination' and temp_oneway.v = '-1' THEN 'Blocco fisico sulla giunzione iniziale'
ELSE '--'
END as restriction_value
from ways 
join extra_toponym_city e on e.global_way_id = ways.id 
join way_tags highway on ways.id = highway.way_id and highway.k = 'highway'
left join way_tags temp_access on ways.id = temp_access.way_id and temp_access.k = 'temporary:access'
left join way_tags temp_oneway on ways.id = temp_oneway.way_id and temp_oneway.k = 'temporary:oneway'
where highway.v <> 'proposed'
) q 
  join extra_config_graph cfg on 1=1
join extra_ways on extra_ways.global_id = q.way_id 
where restriction_type <> '--' and restriction_value <> '--'
;

/******************************
********* Region **************
******************************/

/*** Confini delle regioni ***/

drop table if exists region_border_geom ;

create table region_border_geom as
select reg_border.* from 
(
select relation_id, 
ST_GeogFromText(ST_AsText(ST_Polygonize(linestring))) geom
from 
( 
select relation_members.relation_id, ST_GeomFromWKB(ST_AsBinary(ways.linestring)) linestring 
from relation_members join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '4' 
order by relation_members.relation_id, relation_members.sequence_id
) reg_border 
group by relation_id
) reg_border;

/*** Regioni di interesse ***/

drop table if exists region_of_interest;

create table region_of_interest as

select region_id, province_id, graph_uri, id, has_province from (
select 1 priority, region_border_geom.relation_id region_id, province_centroid_geom.relation_id province_id, -- cut following tables
graph_uri, -- for directly using this in sparqlify cfg file (Region hasProvince and Provice isInRegion properties)
'OS' || lpad(region_border_geom.relation_id::text,11,'0') || 'RG' id, -- for directly using this in sparqlify cfg file
'OS' || lpad(province_centroid_geom.relation_id::text,11,'0') || 'PR' has_province -- for directly using this in sparqlify cfg file
from region_border_geom join province_centroid_geom on ST_Covers(region_border_geom.geom, province_centroid_geom.geom)
  join extra_config_graph cfg on 1=1
union
select 2 priority, region_border_geom.relation_id region_id, province_centroid_geom.relation_id province_id, -- cut following tables
graph_uri, -- for directly using this in sparqlify cfg file (Region hasProvince and Provice isInRegion properties)
'OS' || lpad(region_border_geom.relation_id::text,11,'0') || 'RG' id, -- for directly using this in sparqlify cfg file
'OS' || lpad(province_centroid_geom.relation_id::text,11,'0') || 'PR' has_province -- for directly using this in sparqlify cfg file
from region_border_geom join province_centroid_geom on ST_Covers(ST_Envelope(ST_GeomFromText(ST_AsText(region_border_geom.geom))), province_centroid_geom.geom)
  join extra_config_graph cfg on 1=1
) candidate_regions 
order by priority 
limit 1;

/********** Region URI **********/

drop table if exists RegionURI ;

Create table RegionURI As
  select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'RG' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '4'
  join (select distinct region_id relation_id from region_of_interest) region_of_interest on r.id = region_of_interest.relation_id 
  join extra_config_graph cfg on 1=1;

/********** Region.Identifier **********/

drop table if exists RegionIdentifier ;

Create table RegionIdentifier As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'RG' id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '4'
  join (select distinct region_id relation_id from region_of_interest) region_of_interest on r.id = region_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Region.Name **********/

drop table if exists RegionName ;

Create Table RegionName As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'RG' id,
       r_name.v p_name
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '4'
  join relation_tags r_name on r.id = r_name.relation_id and r_name.k = 'name'
  join (select distinct region_id relation_id from region_of_interest) region_of_interest on r.id = region_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/********** Region.Alternative **********/

drop table if exists RegionAlternative ;

Create Table RegionAlternative As
select distinct graph_uri, 'OS' || lpad(r.id::text,11,'0') || 'RG' id,
       r_short_name.v alternative
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'boundary'
  join relation_tags r_boundary on r.id = r_boundary.relation_id and r_boundary.k = 'boundary' and r_boundary.v = 'administrative'
  join relation_tags r_admin_level on r.id = r_admin_level.relation_id and r_admin_level.k = 'admin_level' and r_admin_level.v = '4'
  join relation_tags r_short_name on r.id = r_short_name.relation_id and r_short_name.k = 'short_name'
  join (select distinct region_id relation_id from region_of_interest) region_of_interest on r.id = region_of_interest.relation_id 
  join extra_config_graph cfg on 1=1
;

/*******************************************
****************** Lanes & Restrictions ****
*******************************************/

drop table if exists land_based_transportation;

create table land_based_transportation (
id serial primary key,
description varchar(255)
);

insert into land_based_transportation(description) values ('foot');
insert into land_based_transportation(description) values ('ski');
insert into land_based_transportation(description) values ('ski:nordic');
insert into land_based_transportation(description) values ('ski:alpine');
insert into land_based_transportation(description) values ('ski:telemark');
insert into land_based_transportation(description) values ('inline_slites');
insert into land_based_transportation(description) values ('ice_skates');
insert into land_based_transportation(description) values ('horse');
insert into land_based_transportation(description) values ('vehicle');
insert into land_based_transportation(description) values ('bicycle');
insert into land_based_transportation(description) values ('carriage');
insert into land_based_transportation(description) values ('trailer');
insert into land_based_transportation(description) values ('caravan');
insert into land_based_transportation(description) values ('motor_vehicle');
insert into land_based_transportation(description) values ('motorcycle');
insert into land_based_transportation(description) values ('moped');
insert into land_based_transportation(description) values ('mofa');
insert into land_based_transportation(description) values ('motorcar');
insert into land_based_transportation(description) values ('motorhome');
insert into land_based_transportation(description) values ('tourist_bus');
insert into land_based_transportation(description) values ('goods');
insert into land_based_transportation(description) values ('hgv');
insert into land_based_transportation(description) values ('agricoltural');
insert into land_based_transportation(description) values ('atv');
insert into land_based_transportation(description) values ('snowmobile');
insert into land_based_transportation(description) values ('psv');
insert into land_based_transportation(description) values ('bus');
insert into land_based_transportation(description) values ('minibus');
insert into land_based_transportation(description) values ('share_taxi');
insert into land_based_transportation(description) values ('taxi');
insert into land_based_transportation(description) values ('hov');
insert into land_based_transportation(description) values ('car_sharing');
insert into land_based_transportation(description) values ('emergency');
insert into land_based_transportation(description) values ('hazmat');
insert into land_based_transportation(description) values ('disabled');


drop table if exists i_node_tags;

create table i_node_tags as
select * from node_tags where not k like '%conditional%' 
union
select * from node_tags where k like '%conditional%' and (node_id, k) not in ( select node_id, k from (
select splitted.node_id, splitted.k, splitted.splitted_v from (
select *, unnest(regexp_split_to_array(v, ';(?![^\(]*\))')) splitted_v from node_tags  where k like '%conditional%' and v like '%;%'
) splitted 
join
(
select *, unnest(regexp_matches(v, '(;(?![^\(]*\)))([ \t]*)(yes|no|private|permissive|destination|delivery|customers|designated|use_sidepath|dismount|agricoltural|forestry|discouraged)')) matched_in_v from node_tags where k like '%conditional%' and v like '%;%'
) to_be_splitted
on splitted.node_id = to_be_splitted.node_id and splitted.k = to_be_splitted.k
) foo )
union 
select splitted.node_id, splitted.k, trim(splitted.splitted_v) v from (
select *, unnest(regexp_split_to_array(v, ';(?![^\(]*\))')) splitted_v from node_tags  where k like '%conditional%' and v like '%;%'
) splitted 
join
(
select *, unnest(regexp_matches(v, '(;(?![^\(]*\)))([ \t]*)(yes|no|private|permissive|destination|delivery|customers|designated|use_sidepath|dismount|agricoltural|forestry|discouraged)')) matched_in_v from node_tags where k like '%conditional%' and v like '%;%'
) to_be_splitted
on splitted.node_id = to_be_splitted.node_id and splitted.k = to_be_splitted.k
;

drop table if exists i_way_tags;

create table i_way_tags as
select * from way_tags where not k like '%conditional%' 
union
select * from way_tags where k like '%conditional%' and (way_id, k) not in ( select way_id, k from (
select splitted.way_id, splitted.k, splitted.splitted_v from (
select *, unnest(regexp_split_to_array(v, ';(?![^\(]*\))')) splitted_v from way_tags  where k like '%conditional%' and v like '%;%'
) splitted 
join
(
select *, unnest(regexp_matches(v, '(;(?![^\(]*\)))([ \t]*)(yes|no|private|permissive|destination|delivery|customers|designated|use_sidepath|dismount|agricoltural|forestry|discouraged)')) matched_in_v from way_tags where k like '%conditional%' and v like '%;%'
) to_be_splitted
on splitted.way_id = to_be_splitted.way_id and splitted.k = to_be_splitted.k
) foo )
union 
select splitted.way_id, splitted.k, trim(splitted.splitted_v) v from (
select *, unnest(regexp_split_to_array(v, ';(?![^\(]*\))')) splitted_v from way_tags  where k like '%conditional%' and v like '%;%'
) splitted 
join
(
select *, unnest(regexp_matches(v, '(;(?![^\(]*\)))([ \t]*)(yes|no|private|permissive|destination|delivery|customers|designated|use_sidepath|dismount|agricoltural|forestry|discouraged)')) matched_in_v from way_tags where k like '%conditional%' and v like '%;%'
) to_be_splitted
on splitted.way_id = to_be_splitted.way_id and splitted.k = to_be_splitted.k
;

drop table if exists i_relation_tags;

create table i_relation_tags as
select * from relation_tags where not k like '%conditional%' 
union
select * from relation_tags where k like '%conditional%' and (relation_id, k) not in ( select relation_id, k from (
select splitted.relation_id, splitted.k, splitted.splitted_v from (
select *, unnest(regexp_split_to_array(v, ';(?![^\(]*\))')) splitted_v from relation_tags  where k like '%conditional%' and v like '%;%'
) splitted 
join
(
select *, unnest(regexp_matches(v, '(;(?![^\(]*\)))([ \t]*)(yes|no|private|permissive|destination|delivery|customers|designated|use_sidepath|dismount|agricoltural|forestry|discouraged)')) matched_in_v from relation_tags where k like '%conditional%' and v like '%;%'
) to_be_splitted
on splitted.relation_id = to_be_splitted.relation_id and splitted.k = to_be_splitted.k
) foo )
union 
select splitted.relation_id, splitted.k, trim(splitted.splitted_v) v from (
select *, unnest(regexp_split_to_array(v, ';(?![^\(]*\))')) splitted_v from relation_tags  where k like '%conditional%' and v like '%;%'
) splitted 
join
(
select *, unnest(regexp_matches(v, '(;(?![^\(]*\)))([ \t]*)(yes|no|private|permissive|destination|delivery|customers|designated|use_sidepath|dismount|agricoltural|forestry|discouraged)')) matched_in_v from relation_tags where k like '%conditional%' and v like '%;%'
) to_be_splitted
on splitted.relation_id = to_be_splitted.relation_id and splitted.k = to_be_splitted.k
;

-- Turn Restrictions

drop table if exists turn_restrictions;

create table turn_restrictions as
select graph.graph_uri, 
case when not from_relation.relation_uri is null then from_relation.relation_uri else 'OS' || lpad(from_way.member_id::text,11,'0') || 'SR' end from_uri, 
case when not to_relation.relation_uri is null then to_relation.relation_uri else 'OS' || lpad(to_way.member_id::text,11,'0') || 'SR' end to_uri, 
restriction_tag.v restriction,
tag_day_on.v day_on,
tag_day_off.v day_off,
tag_hour_on.v hour_on,
tag_hour_off.v hour_off,
tag_except.v exceptions 
from relation_tags relation_type
join relation_members from_way on relation_type.relation_id = from_way.relation_id and from_way.member_type = 'W' and from_way.member_role = 'from'
join relation_members to_way on relation_type.relation_id = to_way.relation_id and to_way.member_type = 'W' and to_way.member_role = 'to'
join relation_members via on relation_type.relation_id = via.relation_id and via.member_role = 'via'
left join way_nodes via_way on via.member_type = 'W' and via.member_id = via_way.way_id and via_way.sequence_id = 0
left join nodes via_way_node on via_way.node_id = via_way_node.id
left join nodes via_node on via.member_type = 'N' and via.member_id = via_node.id
join relation_tags restriction_tag on relation_type.relation_id = restriction_tag.relation_id and restriction_tag.k = 'restriction'
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) from_relation on from_relation.member_id = from_way.member_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) to_relation on to_relation.member_id = to_way.member_id
left join relation_tags tag_day_on on relation_type.relation_id = tag_day_on.relation_id and tag_day_on.k = 'day_on'
left join relation_tags tag_day_off on relation_type.relation_id = tag_day_off.relation_id and tag_day_off.k = 'day_off'
left join relation_tags tag_hour_on on relation_type.relation_id = tag_hour_on.relation_id and tag_hour_on.k = 'hour_on'
left join relation_tags tag_hour_off on relation_type.relation_id = tag_hour_off.relation_id and tag_hour_off.k = 'hour_off'
left join relation_tags tag_except on relation_type.relation_id = tag_except.relation_id and tag_except.k = 'except'
join extra_config_boundaries on ST_Covers(extra_config_boundaries.geom, coalesce(via_way_node.geom, via_node.geom))
join extra_config_graph graph on 1=1
where relation_type.k = 'type' and relation_type.v = 'restriction';

------ Access Restrictions

-- Access tags on nodes

drop table if exists node_access;

create table node_access as 
select 
graph.graph_uri, 
p_where,
p_access,
p_direction,
p_who,
nullif(trim(coalesce(readytouse_condition,'') || ' ' || coalesce(day_onoff,'') || ' ' || coalesce(date_onoff,'') || ' ' || coalesce(hour_onoff,'')),'') p_condition
from (
select 
'OS' || lpad(tag_access.node_id::text,11,'0') || 'NO' p_where, 
case when position('@' in tag_access.v) = 0 then tag_access.v else trim(substring(tag_access.v,1,-1+position('@' in tag_access.v))) end p_access, 
nullif(coalesce(tag_day_on.v,'') || case when tag_day_on.v is null or tag_day_off.v is null then '' else ' - ' end || coalesce(tag_day_off.v,''),'') day_onoff,
nullif(coalesce(tag_date_on.v,'') || case when tag_date_on.v is null or tag_date_off.v is null then '' else ' - ' end || coalesce(tag_date_off.v,'') ,'') date_onoff,
nullif(coalesce(tag_hour_on.v,'') || case when tag_hour_on.v is null or tag_hour_off.v is null then '' else ' - ' end || coalesce(tag_hour_off.v,''), '')  hour_onoff,
case when tag_access.k like '%forward%' then 'forward' when tag_access.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
case when position('@' in tag_access.v) > 1 then trim(substring(tag_access.v, 1+position('@' in tag_access.v))) else null end readytouse_condition
from nodes 
join i_node_tags tag_access on nodes.id = tag_access.node_id
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join node_tags tag_day_on on tag_access.node_id = tag_day_on.node_id and tag_day_on.k = 'day_on'
left join node_tags tag_day_off on tag_access.node_id = tag_day_off.node_id and tag_day_off.k = 'day_off'
left join node_tags tag_date_on on tag_access.node_id = tag_date_on.node_id and tag_date_on.k = 'date_on'
left join node_tags tag_date_off on tag_access.node_id = tag_date_off.node_id and tag_date_off.k = 'date_off'
left join node_tags tag_hour_on on tag_access.node_id = tag_hour_on.node_id and tag_hour_on.k = 'hour_on'
left join node_tags tag_hour_off on tag_access.node_id = tag_hour_off.node_id and tag_hour_off.k = 'hour_off'
left join land_based_transportation t on tag_access.k = t.description or tag_access.k like t.description || ':%' or tag_access.k like '%:' || t.description || ':%' or tag_access.k like '%:' || t.description 
where ( tag_access.k = 'access' or tag_access.k like 'access:%' or t.description is not null ) 
and ( resn.start_node_id is not null or reen.end_node_id is not null)
) node_access
join extra_config_graph graph on 1=1
where p_access in ('yes','no','private','permissive','destination','delivery','customers','designated','use_sidepath','dismount','agricoltural','forestry','discouraged');

-- Access tags on ways

drop table if exists way_access;

create table way_access as 
select distinct
graph.graph_uri, 
p_where,
p_access,
p_direction,
p_who,
nullif(trim(coalesce(readytouse_condition,'') || ' ' || coalesce(day_onoff,'') || ' ' || coalesce(date_onoff,'') || ' ' || coalesce(hour_onoff,'')),'') p_condition
from (
select 
case when way_relation.relation_uri is null then 'OS' || lpad(tag_access.way_id::text,11,'0') || 'SR' else 'OS' || lpad(tag_access.way_id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
case when position('@' in tag_access.v) = 0 then tag_access.v else trim(substring(tag_access.v,1,-1+position('@' in tag_access.v))) end p_access, 
nullif(coalesce(tag_day_on.v,'') || case when tag_day_on.v is null or tag_day_off.v is null then '' else ' - ' end || coalesce(tag_day_off.v,''),'') day_onoff,
nullif(coalesce(tag_date_on.v,'') || case when tag_date_on.v is null or tag_date_off.v is null then '' else ' - ' end || coalesce(tag_date_off.v,'') ,'') date_onoff,
nullif(coalesce(tag_hour_on.v,'') || case when tag_hour_on.v is null or tag_hour_off.v is null then '' else ' - ' end || coalesce(tag_hour_off.v,''), '')  hour_onoff,
case when tag_access.k like '%forward%' then 'forward' when tag_access.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
case when position('@' in tag_access.v) > 1 then trim(substring(tag_access.v, 1+position('@' in tag_access.v))) else null end readytouse_condition
from 
ways 
join way_nodes on ways.id = way_nodes.way_id
join i_way_tags tag_access on ways.id = tag_access.way_id
left join way_tags tag_day_on on tag_access.way_id = tag_day_on.way_id and tag_day_on.k = 'day_on'
left join way_tags tag_day_off on tag_access.way_id = tag_day_off.way_id and tag_day_off.k = 'day_off'
left join way_tags tag_date_on on tag_access.way_id = tag_date_on.way_id and tag_date_on.k = 'date_on'
left join way_tags tag_date_off on tag_access.way_id = tag_date_off.way_id and tag_date_off.k = 'date_off'
left join way_tags tag_hour_on on tag_access.way_id = tag_hour_on.way_id and tag_hour_on.k = 'hour_on'
left join way_tags tag_hour_off on tag_access.way_id = tag_hour_off.way_id and tag_hour_off.k = 'hour_off'
left join land_based_transportation t on tag_access.k = t.description or tag_access.k like t.description || ':%' or tag_access.k like '%:' || t.description || ':%' or tag_access.k like '%:' || t.description 
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
where ( tag_access.k = 'access' or tag_access.k like 'access:%' or t.description is not null) 
) node_access
join extra_config_graph graph on 1=1
where p_access in ('yes','no','private','permissive','destination','delivery','customers','designated','use_sidepath','dismount','agricoltural','forestry','discouraged');

-- Access tags on relations

drop table if exists relation_access;

create table relation_access as 
select 
graph.graph_uri, 
p_where,
p_access,
p_direction,
p_who,
nullif(trim(coalesce(readytouse_condition,'') || ' ' || coalesce(day_onoff,'') || ' ' || coalesce(date_onoff,'') || ' ' || coalesce(hour_onoff,'')),'') p_condition
from (
select 
relations.relation_uri p_where, 
case when position('@' in tag_access.v) = 0 then tag_access.v else trim(substring(tag_access.v,1,-1+position('@' in tag_access.v))) end p_access, 
nullif(coalesce(tag_day_on.v,'') || case when tag_day_on.v is null or tag_day_off.v is null then '' else ' - ' end || coalesce(tag_day_off.v,''),'') day_onoff,
nullif(coalesce(tag_date_on.v,'') || case when tag_date_on.v is null or tag_date_off.v is null then '' else ' - ' end || coalesce(tag_date_off.v,'') ,'') date_onoff,
nullif(coalesce(tag_hour_on.v,'') || case when tag_hour_on.v is null or tag_hour_off.v is null then '' else ' - ' end || coalesce(tag_hour_off.v,''), '')  hour_onoff,
case when tag_access.k like '%forward%' then 'forward' when tag_access.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
case when position('@' in tag_access.v) > 1 then trim(substring(tag_access.v, 1+position('@' in tag_access.v))) else null end readytouse_condition
from 
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join i_relation_tags tag_access on relations.id = tag_access.relation_id
left join relation_tags tag_day_on on tag_access.relation_id = tag_day_on.relation_id and tag_day_on.k = 'day_on'
left join relation_tags tag_day_off on tag_access.relation_id = tag_day_off.relation_id and tag_day_off.k = 'day_off'
left join relation_tags tag_date_on on tag_access.relation_id = tag_date_on.relation_id and tag_date_on.k = 'date_on'
left join relation_tags tag_date_off on tag_access.relation_id = tag_date_off.relation_id and tag_date_off.k = 'date_off'
left join relation_tags tag_hour_on on tag_access.relation_id = tag_hour_on.relation_id and tag_hour_on.k = 'hour_on'
left join relation_tags tag_hour_off on tag_access.relation_id = tag_hour_off.relation_id and tag_hour_off.k = 'hour_off'
left join land_based_transportation t on tag_access.k = t.description or tag_access.k like t.description || ':%' or tag_access.k like '%:' || t.description || ':%' or tag_access.k like '%:' || t.description 
where ( tag_access.k = 'access' or tag_access.k like 'access:%' or t.description is not null ) 
) node_access
join extra_config_graph graph on 1=1
where p_access in ('yes','no','private','permissive','destination','delivery','customers','designated','use_sidepath','dismount','agricoltural','forestry','discouraged');

-- Oneway tags on nodes

drop table if exists node_oneway;

create table node_oneway as 
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
case when case when position('@' in tag_oneway.v) = 0 then tag_oneway.v else trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) end <> 'no' and tag_cycleway_opposite.node_id is null then 'no' else 'yes' end p_access,
case 
when position('@' in tag_oneway.v) = 0 and ( tag_oneway.v = 'yes' or tag_oneway.v = '1' ) then 'backward' 
when position('@' in tag_oneway.v) > 0 and ( trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = 'yes' or trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = '1' ) then 'backward'
when position('@' in tag_oneway.v) = 0 and tag_oneway.v = '-1' then 'forward' 
when position('@' in tag_oneway.v) > 0 and trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = '-1' then 'forward'
else unnest(array['forward','backward']) 
end p_direction,
case when t.description is not null then t.description when coalesce(tag_ped_cycle.v,'') = 'pedestrian' then 'foot' when coalesce(tag_ped_cycle.v,'') = 'cycleway' or tag_cycleway_opposite.node_id is not null then 'bicycle' else 'vehicle' end p_who,
case when position('@' in tag_oneway.v) > 1 then trim(substring(tag_oneway.v, 1+position('@' in tag_oneway.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_oneway on nodes.id = tag_oneway.node_id and ( tag_oneway.k = 'oneway' or tag_oneway.k like '%:oneway:%' or tag_oneway.k like 'oneway:%' or tag_oneway.k like '%:oneway' )
left join land_based_transportation t on tag_oneway.k = t.description or tag_oneway.k like t.description || ':%' or tag_oneway.k like '%:' || t.description || ':%' or tag_oneway.k like '%:' || t.description 
left join node_tags tag_ped_cycle on nodes.id = tag_ped_cycle.node_id and tag_ped_cycle.k = 'highway' and tag_ped_cycle.v in ('pedestrian','cycleway')
left join node_tags tag_cycleway_opposite on nodes.id = tag_cycleway_opposite.node_id and tag_cycleway_opposite.k = 'cycleway' and tag_cycleway_opposite.v = 'opposite'
join extra_config_graph graph on 1=1
where ( resn.start_node_id is not null or reen.end_node_id is not null ) and 
(case when case when position('@' in tag_oneway.v) = 0 then tag_oneway.v else trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) end <> 'no' and tag_cycleway_opposite.node_id is null then 'no' else 'yes' end in ('yes', '1', '-1', 'no', 'reversible', 'alternating' ));

-- Oneway tags on ways

drop table if exists way_oneway;

create table way_oneway as 
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
case when case when position('@' in tag_oneway.v) = 0 then tag_oneway.v else trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) end <> 'no' and tag_cycleway_opposite.way_id is null then 'no' else 'yes' end p_access,
case 
when position('@' in tag_oneway.v) = 0 and ( tag_oneway.v = 'yes' or tag_oneway.v = '1' ) then 'backward' 
when position('@' in tag_oneway.v) > 0 and ( trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = 'yes' or trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = '1' ) then 'backward'
when position('@' in tag_oneway.v) = 0 and tag_oneway.v = '-1' then 'forward' 
when position('@' in tag_oneway.v) > 0 and trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = '-1' then 'forward'
else unnest(array['forward','backward']) 
end p_direction,
case when t.description is not null then t.description when coalesce(tag_ped_cycle.v,'') = 'pedestrian' then 'foot' when coalesce(tag_ped_cycle.v,'') = 'cycleway' or tag_cycleway_opposite.way_id is not null then 'bicycle' else 'vehicle' end p_who,
case when position('@' in tag_oneway.v) > 1 then trim(substring(tag_oneway.v, 1+position('@' in tag_oneway.v))) else null end p_condition
from ways
join way_nodes on ways.id = way_nodes.way_id
join extra_toponym_city e on ways.id = e.global_way_id 
join way_tags tag_oneway on ways.id = tag_oneway.way_id and ( tag_oneway.k = 'oneway' or tag_oneway.k like '%:oneway:%' or tag_oneway.k like 'oneway:%' or tag_oneway.k like '%:oneway' )
left join land_based_transportation t on tag_oneway.k = t.description or tag_oneway.k like t.description || ':%' or tag_oneway.k like '%:' || t.description || ':%' or tag_oneway.k like '%:' || t.description 
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
left join way_tags tag_ped_cycle on ways.id = tag_ped_cycle.way_id and tag_ped_cycle.k = 'highway' and tag_ped_cycle.v in ('pedestrian','cycleway')
left join way_tags tag_cycleway_opposite on ways.id = tag_cycleway_opposite.way_id and tag_cycleway_opposite.k = 'cycleway' and tag_cycleway_opposite.v = 'opposite'
join extra_config_graph graph on 1=1
where  
case when case when position('@' in tag_oneway.v) = 0 then tag_oneway.v else trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) end <> 'no' and tag_cycleway_opposite.way_id is null then 'no' else 'yes' end in ('yes', '1', '-1', 'no', 'reversible', 'alternating' )
;

-- Oneway tags on relations

drop table if exists relation_oneway;

create table relation_oneway as 
select distinct
graph.graph_uri, 
relations.relation_uri p_where,
case when case when position('@' in tag_oneway.v) = 0 then tag_oneway.v else trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) end <> 'no' and tag_cycleway_opposite.relation_id is null then 'no' else 'yes' end p_access,
case 
when position('@' in tag_oneway.v) = 0 and ( tag_oneway.v = 'yes' or tag_oneway.v = '1' ) then 'backward' 
when position('@' in tag_oneway.v) > 0 and ( trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = 'yes' or trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = '1' ) then 'backward'
when position('@' in tag_oneway.v) = 0 and tag_oneway.v = '-1' then 'forward' 
when position('@' in tag_oneway.v) > 0 and trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) = '-1' then 'forward'
else unnest(array['forward','backward']) 
end p_direction,
case when t.description is not null then t.description when coalesce(tag_ped_cycle.v,'') = 'pedestrian' then 'foot' when coalesce(tag_ped_cycle.v,'') = 'cycleway' or tag_cycleway_opposite.relation_id is not null then 'bicycle' else 'vehicle' end p_who,
case when position('@' in tag_oneway.v) > 1 then trim(substring(tag_oneway.v, 1+position('@' in tag_oneway.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_oneway on relations.id = tag_oneway.relation_id and ( tag_oneway.k = 'oneway' or tag_oneway.k like '%:oneway:%' or tag_oneway.k like 'oneway:%' or tag_oneway.k like '%:oneway' )
left join land_based_transportation t on tag_oneway.k = t.description or tag_oneway.k like t.description || ':%' or tag_oneway.k like '%:' || t.description || ':%' or tag_oneway.k like '%:' || t.description 
left join relation_tags tag_ped_cycle on relations.id = tag_ped_cycle.relation_id and tag_ped_cycle.k = 'highway' and tag_ped_cycle.v in ('pedestrian','cycleway')
left join relation_tags tag_cycleway_opposite on relations.id = tag_cycleway_opposite.relation_id and tag_cycleway_opposite.k = 'cycleway' and tag_cycleway_opposite.v = 'opposite'
join extra_config_graph graph on 1=1
where 
case when case when position('@' in tag_oneway.v) = 0 then tag_oneway.v else trim(substring(tag_oneway.v,1,-1+position('@' in tag_oneway.v))) end <> 'no' and tag_cycleway_opposite.relation_id is null then 'no' else 'yes' end in ('yes', '1', '-1', 'no', 'reversible', 'alternating' )
;

----- Measure Restrictions

-- Measure Restrictions on Nodes

drop table if exists node_maxweight;

create table node_maxweight as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxweight' as varchar(255)) p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_limit, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxweight on nodes.id = tag_maxweight.node_id and 
trim(replace(replace(replace(replace(tag_maxweight.k,'maxweight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxaxleload;

create table node_maxaxleload as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxaxleload' as varchar(255)) p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_limit, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxaxleload on nodes.id = tag_maxaxleload.node_id and 
trim(replace(replace(replace(replace(tag_maxaxleload.k,'maxaxleload',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxheight;

create table node_maxheight as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxheight' as varchar(255)) p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_limit, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxheight on nodes.id = tag_maxheight.node_id and 
trim(replace(replace(replace(replace(tag_maxheight.k,'maxheight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxwidth;

create table node_maxwidth as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxwidth' as varchar(255)) p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_limit, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxwidth on nodes.id = tag_maxwidth.node_id and
trim(replace(replace(replace(replace(tag_maxwidth.k,'maxwidth',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxlength;

create table node_maxlength as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxlength' as varchar(255)) p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_limit, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxlength on nodes.id = tag_maxlength.node_id and
trim(replace(replace(replace(replace(tag_maxlength.k,'maxlength',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxdraught;

create table node_maxdraught as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxdraught' as varchar(255)) p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_limit, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxdraught on nodes.id = tag_maxdraught.node_id and 
trim(replace(replace(replace(replace(tag_maxdraught.k,'maxdraught',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxspeed;

create table node_maxspeed as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxspeed' as varchar(255)) p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_limit, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxspeed on nodes.id = tag_maxspeed.node_id and 
trim(replace(replace(replace(replace(tag_maxspeed.k,'maxspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_minspeed;

create table node_minspeed as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'minspeed' as varchar(255)) p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_limit, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_minspeed on nodes.id = tag_minspeed.node_id and 
trim(replace(replace(replace(replace(tag_minspeed.k,'minspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxstay;

create table node_maxstay as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxstay' as varchar(255)) p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_limit, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxstay on nodes.id = tag_maxstay.node_id and 
trim(replace(replace(replace(replace(tag_maxstay.k,'maxstay',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

-- Measure Restrictions on Ways

drop table if exists way_maxweight;

create table way_maxweight as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxweight' as varchar(255)) p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_limit, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxweight on ways.id = tag_maxweight.way_id and 
trim(replace(replace(replace(replace(tag_maxweight.k,'maxweight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxaxleload;

create table way_maxaxleload as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxaxleload' as varchar(255)) p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_limit, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxaxleload on ways.id = tag_maxaxleload.way_id and 
trim(replace(replace(replace(replace(tag_maxaxleload.k,'maxaxleload',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxheight;

create table way_maxheight as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxheight' as varchar(255)) p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_limit, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxheight on ways.id = tag_maxheight.way_id and 
trim(replace(replace(replace(replace(tag_maxheight.k,'maxheight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxwidth;

create table way_maxwidth as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxwidth' as varchar(255)) p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_limit, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxwidth on ways.id = tag_maxwidth.way_id and 
trim(replace(replace(replace(replace(tag_maxwidth.k,'maxwidth',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxlength;

create table way_maxlength as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxlength' as varchar(255)) p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_limit, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxlength on ways.id = tag_maxlength.way_id and 
trim(replace(replace(replace(replace(tag_maxlength.k,'maxlength',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxdraught;

create table way_maxdraught as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxdraught' as varchar(255)) p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_limit, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxdraught on ways.id = tag_maxdraught.way_id and 
trim(replace(replace(replace(replace(tag_maxdraught.k,'maxdraught',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxspeed;

create table way_maxspeed as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxspeed' as varchar(255)) p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_limit, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxspeed on ways.id = tag_maxspeed.way_id and trim(replace(replace(replace(replace(tag_maxspeed.k,'maxspeed',''),'forward',''),'backward',''),':','')) = '' 
join extra_config_graph graph on 1=1;

drop table if exists way_minspeed;

create table way_minspeed as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'minspeed' as varchar(255)) p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_limit, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_minspeed on ways.id = tag_minspeed.way_id and
trim(replace(replace(replace(replace(tag_minspeed.k,'minspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxstay;

create table way_maxstay as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
cast(varchar 'maxstay' as varchar(255)) p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_limit, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxstay on ways.id = tag_maxstay.way_id and 
trim(replace(replace(replace(replace(tag_maxstay.k,'maxstay',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

-- Measure Restrictions on Relations

drop table if exists relation_maxweight;

create table relation_maxweight as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxweight' as varchar(255)) p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_limit, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxweight on relations.id = tag_maxweight.relation_id and 
trim(replace(replace(replace(replace(tag_maxweight.k,'maxweight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxaxleload;

create table relation_maxaxleload as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxaxleload' as varchar(255)) p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_limit, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxaxleload on relations.id = tag_maxaxleload.relation_id and 
trim(replace(replace(replace(replace(tag_maxaxleload.k,'maxaxleload',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxheight;

create table relation_maxheight as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxheight' as varchar(255)) p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_limit, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxheight on relations.id = tag_maxheight.relation_id and 
trim(replace(replace(replace(replace(tag_maxheight.k,'maxheight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxwidth;

create table relation_maxwidth as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxwidth' as varchar(255)) p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_limit, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxwidth on relations.id = tag_maxwidth.relation_id and 
trim(replace(replace(replace(replace(tag_maxwidth.k,'maxwidth',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxlength;

create table relation_maxlength as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxlength' as varchar(255)) p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_limit, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxlength on relations.id = tag_maxlength.relation_id and 
trim(replace(replace(replace(replace(tag_maxlength.k,'maxlength',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxdraught;

create table relation_maxdraught as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxdraught' as varchar(255)) p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_limit, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxdraught on relations.id = tag_maxdraught.relation_id and 
trim(replace(replace(replace(replace(tag_maxdraught.k,'maxdraught',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxspeed;

create table relation_maxspeed as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxspeed' as varchar(255)) p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_limit, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxspeed on relations.id = tag_maxspeed.relation_id and 
trim(replace(replace(replace(replace(tag_maxspeed.k,'maxspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_minspeed;

create table relation_minspeed as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'minspeed' as varchar(255)) p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_limit, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_minspeed on relations.id = tag_minspeed.relation_id and 
trim(replace(replace(replace(replace(tag_minspeed.k,'minspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxstay;

create table relation_maxstay as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxstay' as varchar(255)) p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_limit, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxstay on relations.id = tag_maxstay.relation_id and 
trim(replace(replace(replace(replace(tag_maxstay.k,'maxstay',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

------------- Lanes tagged on ways

-- Count

drop table if exists lanes_count;

create table lanes_count as 
select distinct
graph.graph_uri,
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where,
case when tag_lanes.k like '%forward%' then 'forward' when tag_lanes.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
tag_lanes.v lanes_count
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_lanes on ways.id = tag_lanes.way_id and tag_lanes.k like '%lanes%' and tag_lanes.v ~ '^[0-9\.]+$'
left join land_based_transportation t on tag_lanes.k = t.description or tag_lanes.k like t.description || ':%' or tag_lanes.k like '%:' || t.description || ':%' or tag_lanes.k like '%:' || t.description 
join extra_config_graph graph on 1=1
where trim(replace(replace(replace(replace(tag_lanes.k,coalesce(t.description,''),''),'forward',''),'backward',''),':','')) = 'lanes';

-- Turns

drop table if exists lanes_turn;

create table lanes_turn as
select distinct
graph_uri,
p_where,
p_direction,
pos,
turns[pos] turn
from 
(
select
graph.graph_uri,
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where,
case when tag_turn.k like '%forward%' then 'forward' when tag_turn.k like '%backward%' then 'backward' else null end p_direction ,
string_to_array(tag_turn.v, '|') turns,
generate_subscripts(string_to_array(tag_turn.v, '|'),1) as pos
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_turn on ways.id = tag_turn.way_id and tag_turn.k like '%turn%' and tag_turn.k like '%lanes%'
join extra_config_graph graph on 1=1
) unsorted_turns 
order by graph_uri, p_where, p_direction, pos; 

-- Access

drop table if exists lanes_access;

create table lanes_access as
select
graph_uri,
p_where,
p_direction,
p_who,
p_condition,
pos,
access_restrictions[pos] restriction
from 
(
select distinct
graph.graph_uri, 
p_where,
string_to_array(p_access, '|') access_restrictions,
generate_subscripts(string_to_array(p_access, '|'),1) pos,
p_direction,
p_who,
nullif(trim(coalesce(readytouse_condition,'') || ' ' || coalesce(day_onoff,'') || ' ' || coalesce(date_onoff,'') || ' ' || coalesce(hour_onoff,'')),'') p_condition
from (
select 
case when way_relation.relation_uri is null then 'OS' || lpad(tag_access.way_id::text,11,'0') || 'SR' else 'OS' || lpad(tag_access.way_id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
case when position('@' in tag_access.v) = 0 then tag_access.v else trim(substring(tag_access.v,1,-1+position('@' in tag_access.v))) end p_access, 
nullif(coalesce(tag_day_on.v,'') || case when tag_day_on.v is null or tag_day_off.v is null then '' else ' - ' end || coalesce(tag_day_off.v,''),'') day_onoff,
nullif(coalesce(tag_date_on.v,'') || case when tag_date_on.v is null or tag_date_off.v is null then '' else ' - ' end || coalesce(tag_date_off.v,'') ,'') date_onoff,
nullif(coalesce(tag_hour_on.v,'') || case when tag_hour_on.v is null or tag_hour_off.v is null then '' else ' - ' end || coalesce(tag_hour_off.v,''), '')  hour_onoff,
case when tag_access.k like '%forward%' then 'forward' when tag_access.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
case when position('@' in tag_access.v) > 1 then trim(substring(tag_access.v, 1+position('@' in tag_access.v))) else null end readytouse_condition
from 
ways 
join way_nodes on ways.id = way_nodes.way_id
join i_way_tags tag_access on ways.id = tag_access.way_id
left join way_tags tag_day_on on tag_access.way_id = tag_day_on.way_id and tag_day_on.k = 'day_on'
left join way_tags tag_day_off on tag_access.way_id = tag_day_off.way_id and tag_day_off.k = 'day_off'
left join way_tags tag_date_on on tag_access.way_id = tag_date_on.way_id and tag_date_on.k = 'date_on'
left join way_tags tag_date_off on tag_access.way_id = tag_date_off.way_id and tag_date_off.k = 'date_off'
left join way_tags tag_hour_on on tag_access.way_id = tag_hour_on.way_id and tag_hour_on.k = 'hour_on'
left join way_tags tag_hour_off on tag_access.way_id = tag_hour_off.way_id and tag_hour_off.k = 'hour_off'
left join land_based_transportation t on tag_access.k = t.description or tag_access.k like t.description || ':%' or tag_access.k like '%:' || t.description || ':%' or tag_access.k like '%:' || t.description 
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
where ( tag_access.k like '%lanes%' and ( tag_access.k like '%access%' or t.description is not null ) ) 
) node_access
join extra_config_graph graph on 1=1
) unsorted_restrictions
where access_restrictions[pos] in ('yes','no','private','permissive','destination','delivery','customers','designated','use_sidepath','dismount','agricoltural','forestry','discouraged')
order by graph_uri, p_where, p_direction, p_who, p_condition, pos;

-- Measures 

drop table if exists lanes_maxweight;

create table lanes_maxweight as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxweights[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxweight, '|') maxweights,
generate_subscripts(string_to_array(p_maxweight, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxweight' p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_maxweight, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxweight on ways.id = tag_maxweight.way_id and tag_maxweight.k like '%maxweight%' and tag_maxweight.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restriction
) unordered 
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxwidth;

create table lanes_maxwidth as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxwidths[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxwidth, '|') maxwidths,
generate_subscripts(string_to_array(p_maxwidth, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxwidth' p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_maxwidth, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxwidth on ways.id = tag_maxwidth.way_id and tag_maxwidth.k like '%maxwidth%' and tag_maxwidth.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unordered
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxaxleload;

create table lanes_maxaxleload as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxaxleloads[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxaxleload, '|') maxaxleloads,
generate_subscripts(string_to_array(p_maxaxleload, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxaxleload' p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_maxaxleload, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxaxleload on ways.id = tag_maxaxleload.way_id and tag_maxaxleload.k like '%maxaxleload%' and tag_maxaxleload.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restriction
) unordered
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxheight;

create table lanes_maxheight as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxheights[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxheight, '|') maxheights,
generate_subscripts(string_to_array(p_maxheight, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxheight' p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_maxheight, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxheight on ways.id = tag_maxheight.way_id and tag_maxheight.k like '%maxheight%' and tag_maxheight.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxlength;

create table lanes_maxlength as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxlengths[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxlength, '|') maxlengths,
generate_subscripts(string_to_array(p_maxlength, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxlength' p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_maxlength, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxlength on ways.id = tag_maxlength.way_id and tag_maxlength.k like '%maxlength%' and tag_maxlength.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxdraught;

create table lanes_maxdraught as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxdraughts[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxdraught, '|') maxdraughts,
generate_subscripts(string_to_array(p_maxdraught, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxdraught' p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_maxdraught, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxdraught on ways.id = tag_maxdraught.way_id and tag_maxdraught.k like '%maxdraught%' and tag_maxdraught.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxspeed;

create table lanes_maxspeed as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxspeeds[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxspeed, '|') maxspeeds,
generate_subscripts(string_to_array(p_maxspeed, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxspeed' p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_maxspeed, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxspeed on ways.id = tag_maxspeed.way_id and tag_maxspeed.k like '%maxspeed%' and tag_maxspeed.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_minspeed;

create table lanes_minspeed as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
minspeeds[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_minspeed, '|') minspeeds,
generate_subscripts(string_to_array(p_minspeed, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'minspeed' p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_minspeed, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_minspeed on ways.id = tag_minspeed.way_id and tag_minspeed.k like '%minspeed%' and tag_minspeed.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

drop table if exists lanes_maxstay;

create table lanes_maxstay as
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxstays[pos] p_limit
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxstay, '|') maxstays,
generate_subscripts(string_to_array(p_maxstay, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || way_nodes.sequence_id end p_where, 
'maxstay' p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_maxstay, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from ways
join extra_toponym_city on ways.id = extra_toponym_city.global_way_id
join way_nodes on ways.id = way_nodes.way_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxstay on ways.id = tag_maxstay.way_id and tag_maxstay.k like '%maxstay%' and tag_maxstay.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

------------ Lanes tagged on relations

-- Count

insert into lanes_count
select distinct
graph.graph_uri,
relations.relation_uri p_where,
case when tag_lanes.k like '%forward%' then 'forward' when tag_lanes.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
tag_lanes.v lanes_count
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_lanes on relations.id = tag_lanes.relation_id and tag_lanes.k like '%lanes%' and tag_lanes.v ~ '^[0-9\.]+$'
left join land_based_transportation t on tag_lanes.k = t.description or tag_lanes.k like t.description || ':%' or tag_lanes.k like '%:' || t.description || ':%' or tag_lanes.k like '%:' || t.description 
join extra_config_graph graph on 1=1
where trim(replace(replace(replace(replace(tag_lanes.k,coalesce(t.description,''),''),'forward',''),'backward',''),':','')) = 'lanes';

-- Turns

insert into lanes_turn 
select distinct
graph_uri,
p_where,
p_direction,
pos,
turns[pos] turn
from 
(
select
graph.graph_uri,
relations.relation_uri p_where,
case when tag_turn.k like '%forward%' then 'forward' when tag_turn.k like '%backward%' then 'backward' else null end p_direction ,
string_to_array(tag_turn.v, '|') turns,
generate_subscripts(string_to_array(tag_turn.v, '|'),1) as pos
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_turn on relations.id = tag_turn.relation_id and tag_turn.k like '%turn%' and tag_turn.k like '%lanes%'
join extra_config_graph graph on 1=1
) unsorted_turns 
order by graph_uri, p_where, p_direction, pos; 

-- Access

insert into lanes_access 
select
graph_uri,
p_where,
p_direction,
p_who,
p_condition,
pos,
access_restrictions[pos] restriction
from 
(
select distinct
graph.graph_uri, 
p_where,
string_to_array(p_access, '|') access_restrictions,
generate_subscripts(string_to_array(p_access, '|'),1) pos,
p_direction,
p_who,
nullif(trim(coalesce(readytouse_condition,'') || ' ' || coalesce(day_onoff,'') || ' ' || coalesce(date_onoff,'') || ' ' || coalesce(hour_onoff,'')),'') p_condition
from (
select 
relations.relation_uri p_where, 
case when position('@' in tag_access.v) = 0 then tag_access.v else trim(substring(tag_access.v,1,-1+position('@' in tag_access.v))) end p_access, 
nullif(coalesce(tag_day_on.v,'') || case when tag_day_on.v is null or tag_day_off.v is null then '' else ' - ' end || coalesce(tag_day_off.v,''),'') day_onoff,
nullif(coalesce(tag_date_on.v,'') || case when tag_date_on.v is null or tag_date_off.v is null then '' else ' - ' end || coalesce(tag_date_off.v,'') ,'') date_onoff,
nullif(coalesce(tag_hour_on.v,'') || case when tag_hour_on.v is null or tag_hour_off.v is null then '' else ' - ' end || coalesce(tag_hour_off.v,''), '')  hour_onoff,
case when tag_access.k like '%forward%' then 'forward' when tag_access.k like '%backward%' then 'backward' else null end p_direction ,
t.description p_who ,
case when position('@' in tag_access.v) > 1 then trim(substring(tag_access.v, 1+position('@' in tag_access.v))) else null end readytouse_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join i_relation_tags tag_access on relations.id = tag_access.relation_id
left join relation_tags tag_day_on on tag_access.relation_id = tag_day_on.relation_id and tag_day_on.k = 'day_on'
left join relation_tags tag_day_off on tag_access.relation_id = tag_day_off.relation_id and tag_day_off.k = 'day_off'
left join relation_tags tag_date_on on tag_access.relation_id = tag_date_on.relation_id and tag_date_on.k = 'date_on'
left join relation_tags tag_date_off on tag_access.relation_id = tag_date_off.relation_id and tag_date_off.k = 'date_off'
left join relation_tags tag_hour_on on tag_access.relation_id = tag_hour_on.relation_id and tag_hour_on.k = 'hour_on'
left join relation_tags tag_hour_off on tag_access.relation_id = tag_hour_off.relation_id and tag_hour_off.k = 'hour_off'
left join land_based_transportation t on tag_access.k = t.description or tag_access.k like t.description || ':%' or tag_access.k like '%:' || t.description || ':%' or tag_access.k like '%:' || t.description 
where ( tag_access.k like '%lanes%' and ( tag_access.k like '%access%' or t.description is not null ) ) 
) node_access
join extra_config_graph graph on 1=1
) unsorted_restrictions
where access_restrictions[pos] in ('yes','no','private','permissive','destination','delivery','customers','designated','use_sidepath','dismount','agricoltural','forestry','discouraged')
order by graph_uri, p_where, p_direction, p_who, p_condition, pos;

-- Measures 

insert into lanes_maxweight 
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxweights[pos] maxweight
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxweight, '|') maxweights,
generate_subscripts(string_to_array(p_maxweight, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxweight' p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_maxweight, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxweight on relations.id = tag_maxweight.relation_id and tag_maxweight.k like '%maxweight%' and tag_maxweight.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restriction
) unordered 
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxwidth 
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxwidths[pos] maxwidths
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxwidth, '|') maxwidths,
generate_subscripts(string_to_array(p_maxwidth, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxwidth' p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_maxwidth, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxwidth on relations.id = tag_maxwidth.relation_id and tag_maxwidth.k like '%maxwidth%' and tag_maxwidth.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unordered
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxaxleload
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxaxleloads[pos] maxaxleload
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxaxleload, '|') maxaxleloads,
generate_subscripts(string_to_array(p_maxaxleload, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxaxleload' p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_maxaxleload, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxaxleload on relations.id = tag_maxaxleload.relation_id and tag_maxaxleload.k like '%maxaxleload%' and tag_maxaxleload.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restriction
) unordered
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxheight 
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxheights[pos] maxheight
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxheight, '|') maxheights,
generate_subscripts(string_to_array(p_maxheight, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxheight' p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_maxheight, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxheight on relations.id = tag_maxheight.relation_id and tag_maxheight.k like '%maxheight%' and tag_maxheight.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxlength 
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxlengths[pos] maxlength
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxlength, '|') maxlengths,
generate_subscripts(string_to_array(p_maxlength, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxlength' p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_maxlength, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxlength on relations.id = tag_maxlength.relation_id and tag_maxlength.k like '%maxlength%' and tag_maxlength.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxdraught
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxdraughts[pos] maxdraught
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxdraught, '|') maxdraughts,
generate_subscripts(string_to_array(p_maxdraught, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxdraught' p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_maxdraught, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxdraught on relations.id = tag_maxdraught.relation_id and tag_maxdraught.k like '%maxdraught%' and tag_maxdraught.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxspeed
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxspeeds[pos] maxspeed
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxspeed, '|') maxspeeds,
generate_subscripts(string_to_array(p_maxspeed, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxspeed' p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_maxspeed, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxspeed on relations.id = tag_maxspeed.relation_id and tag_maxspeed.k like '%maxspeed%' and tag_maxspeed.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_minspeed
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
minspeeds[pos] minspeed
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_minspeed, '|') minspeeds,
generate_subscripts(string_to_array(p_minspeed, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'minspeed' p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_minspeed, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_minspeed on relations.id = tag_minspeed.relation_id and tag_minspeed.k like '%minspeed%' and tag_minspeed.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;

insert into lanes_maxstay
select 
graph_uri,
p_where,
p_what,
p_direction,
p_condition,
pos,
maxstays[pos] maxstay
from 
(
select 
graph_uri,
p_where,
p_what,
string_to_array(p_maxstay, '|') maxstays,
generate_subscripts(string_to_array(p_maxstay, '|'), 1 ) pos,
p_direction,
p_condition
from (
select distinct
graph.graph_uri, 
relations.relation_uri p_where, 
'maxstay' p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_maxstay, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from (
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxstay on relations.id = tag_maxstay.relation_id and tag_maxstay.k like '%maxstay%' and tag_maxstay.k like '%lanes%'
join extra_config_graph graph on 1=1
) lanes_restrictions
) unsorted
order by graph_uri, p_where, p_what, p_direction, p_condition, pos;