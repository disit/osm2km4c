/* OSM2KM4C
   Copyright (C) 2017 DISIT Lab http://www.disit.org - University of Florence

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */

-- CONFIGURAZIONE DELL'INSTALLAZIONE
------------------------------------

-- Delimitazione geografica dell'installazione

drop table if exists extra_config_boundaries; 

create table extra_config_boundaries as 
select * from extra_all_boundaries where relation_id in (276369);

create index extra_config_boundaries_index_1 on extra_config_boundaries using gist(boundary);

create index extra_config_boundaries_index_2 on extra_config_boundaries using gist(bbox);

create index extra_config_boundaries_index_3 on extra_config_boundaries using gist(centroid);

-- Grafo

drop table if exists extra_config_graph ;

create table extra_config_graph (
id serial primary key,
graph_uri varchar(255)
);

insert into extra_config_graph(graph_uri) values ('http://www.disit.org/km4city/graph/OSM/CA'); 

-- Utilizzo dei numeri civici della Regione Toscana piuttosto che nativi di OSM

drop table if exists extra_config_civic_num ;

create table extra_config_civic_num (
id serial primary key,
civic_num_source varchar(255)
);

-- insert into extra_config_civic_num(civic_num_source) values ('Regione Toscana'); -- decommentare questa riga per utilizzare i numeri civici della Regione Toscana
insert into extra_config_civic_num(civic_num_source) values ('Open Street Map'); -- decommentare questa riga per utilizzare i numeri civici nativi di Open Street Map

/********************************************
************ TABELLE DI APPOGGIO ************
*********************************************/

-- Esplosione delle way

drop table if exists extra_ways;

create table extra_ways as
select prev_waynode.way_id global_id, prev_waynode.sequence_id local_id, prev_node.geom start_node, next_node.geom end_node, prev_node.id prev_node_id, next_node.id next_node_id
from way_nodes prev_waynode 
join nodes prev_node on prev_waynode.node_id = prev_node.id
join way_nodes next_waynode on prev_waynode.way_id = next_waynode.way_id and prev_waynode.sequence_id = next_waynode.sequence_id-1
join nodes next_node on next_waynode.node_id = next_node.id
join way_tags on prev_waynode.way_id = way_tags.way_id and way_tags.k = 'highway' and way_tags.v <> 'proposed'
join extra_config_boundaries boundaries on ST_Covers(boundaries.boundary, next_node.geom);

create index on extra_ways (global_id);

create index on extra_ways using gist(start_node);

create index on extra_ways using gist(end_node);

-- Comuni di interesse

drop table if exists extra_comuni;

create table extra_comuni as
select relations.id relation_id, extra_all_boundaries.centroid, extra_all_boundaries.boundary boundary, extra_all_boundaries.bbox bbox
from relations 
join relation_tags tag_type on relations.id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relations.id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relations.id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '8' 
-- join relation_tags catasto on relations.id = catasto.relation_id and catasto.k = 'ref:catasto' -- taglio sugli italiani
join extra_all_boundaries on relations.id = extra_all_boundaries.relation_id
join extra_config_boundaries on ST_Covers(extra_config_boundaries.boundary, extra_all_boundaries.boundary);

create index extra_comuni_index_1 on extra_comuni using gist(centroid);

create index extra_comuni_index_2 on extra_comuni using gist(boundary);

create index extra_comuni_index_3 on extra_comuni using gist(bbox);

-- Province di interesse

drop table if exists extra_province;

create table extra_province as
select relations.id relation_id, extra_all_boundaries.centroid, extra_all_boundaries.boundary boundary, extra_all_boundaries.bbox bbox
from relations 
join relation_tags tag_type on relations.id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
join relation_tags boundary on relations.id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join relation_tags admin_level on relations.id = admin_level.relation_id and admin_level.k = 'admin_level' and admin_level.v = '6' 
join extra_all_boundaries on relations.id = extra_all_boundaries.relation_id
join extra_config_boundaries on ST_Covers(extra_config_boundaries.boundary, extra_all_boundaries.boundary);

create index extra_province_index_1 on extra_province using gist(centroid);

create index extra_province_index_2 on extra_province using gist(boundary);

create index extra_province_index_3 on extra_province using gist(bbox);

-- Corrispondenze tra comuni e province

drop table if exists extra_city_county ;

create table extra_city_county as
select extra_comuni.relation_id comune, province_short_name.v provincia
from extra_comuni, extra_province, relation_tags province_short_name
where ST_Covers(extra_province.boundary,extra_comuni.boundary)
and extra_province.relation_id = province_short_name.relation_id
and province_short_name.k = 'short_name';

-- Quartieri

drop table if exists extra_suburbs;

create table extra_suburbs as
select suburb.id, suburb.centroid, suburb.boundary, suburb.suburb_type, suburb.suburb_name, extra_comuni.relation_id municipality_id
from 
(
-- suburb ways
select ways.id, 
	ST_GeomFromText(ST_AsText(ST_Centroid(ST_ConvexHull(ST_Collect(ways.linestring)))),4326) centroid, 
	ST_GeomFromText(ST_AsText(ST_ConvexHull(ST_Collect(linestring))),4326) boundary, 
	'W'::text suburb_type, way_suburb_name.v suburb_name 
from ways
join way_tags boundary on ways.id = boundary.way_id and boundary.k = 'boundary' and boundary.v = 'administrative'
join way_tags admin_level on ways.id = admin_level.way_id and admin_level.k = 'admin_level' and cast(admin_level.v as int) > 8 
join way_tags way_suburb_name on ways.id = way_suburb_name.way_id and way_suburb_name.k = 'name'
group by ways.id, way_suburb_name.v
union
-- suburb relations
select rsuburbs.*, rel_suburb_name.v suburb_name from 
(
select relation_id id, 
	ST_GeomFromText(ST_AsText(ST_Centroid(ST_ConvexHull(ST_Collect(linestring)))),4326) centroid, 
	ST_GeomFromText(ST_AsText(ST_ConvexHull(ST_Collect(linestring))),4326) boundary, 
	'R'::text suburb_type from ( 
	select relation_members.relation_id, ways.linestring
	from relation_members 
	join ways on ways.id = relation_members.member_id and relation_members.member_type='W' 
	join relation_tags tag_type on relation_members.relation_id = tag_type.relation_id and tag_type.k = 'type' and tag_type.v = 'boundary'
	join relation_tags boundary on relation_members.relation_id = boundary.relation_id and boundary.k = 'boundary' and boundary.v = 'administrative'
	join relation_tags admin_level on relation_members.relation_id = admin_level.relation_id and admin_level.k = 'admin_level' and cast(admin_level.v as int) > 8 
 ) sub group by relation_id
) rsuburbs 
join relation_tags rel_suburb_name on rsuburbs.id = rel_suburb_name.relation_id and rel_suburb_name.k = 'name'
union
-- suburb nodes
select id, geom centroid, geom boundary, 'N'::text suburb_type, nd_suburb_name.v suburb_name from nodes join node_tags on nodes.id = node_tags.node_id and node_tags.k = 'place' and node_tags.v = 'suburb' join node_tags nd_suburb_name on nodes.id = nd_suburb_name.node_id and nd_suburb_name.k = 'name'
) suburb
join extra_comuni on ST_Covers(extra_comuni.boundary, suburb.boundary)
;

create index extra_suburbs_index_1 on extra_suburbs using gist(centroid);

create index extra_suburbs_index_2 on extra_suburbs using gist(boundary);

-- Corrispondenze tra elementi stradali, comuni e quartieri

drop table if exists extra_toponym_city ;

create table extra_toponym_city (
	id serial primary key,
	global_way_id bigint,
	local_way_id int,
	city varchar(255), 		
	suburb varchar(255)		
);

insert into extra_toponym_city(global_way_id, local_way_id, city) 
select highways.global_id global_way_id,
highways.local_id local_way_id,
nome_comune.v city 
from 
(
-- ways in relation roads
select extra_ways.global_id, extra_ways.local_id, 
extra_ways.start_node start_pt,
extra_ways.end_node end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_ways on rwt.way_id = extra_ways.global_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union
-- ways in relation pedestrian multipolygon 
select extra_ways.global_id, extra_ways.local_id, 
extra_ways.start_node start_pt,
extra_ways.end_node end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_ways on r_ways.member_id = extra_ways.global_id 
union
-- ways that are roads
select extra_ways.global_id, extra_ways.local_id, 
extra_ways.start_node start_pt,
extra_ways.end_node end_pt
from way_tags wt
join extra_ways on wt.way_id = extra_ways.global_id
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
) highways
join extra_comuni comuni on ST_Covers(comuni.boundary, highways.start_pt) or ST_Covers(comuni.boundary, highways.end_pt)
join relation_tags nome_comune on comuni.relation_id = nome_comune.relation_id and nome_comune.k = 'name';

update extra_toponym_city 
set suburb = suburb.suburb_name
from (

select i_suburb.global_way_id, i_suburb.local_way_id, suburb_name from (
select highways.global_way_id, highways.local_way_id,
coalesce(way_suburb_name.v, rel_suburb_name.v) suburb_name,
dense_rank() over (partition by highways.global_way_id, highways.local_way_id, coalesce(way_suburb_name.v, rel_suburb_name.v) order by cast(coalesce(way_suburb_level.v, rel_suburb_level.v) as int) desc) suburb_rank
from
(
-- ways in relation roads
select extra_ways.global_id global_way_id, extra_ways.local_id local_way_id, 
extra_ways.start_node start_pt,
extra_ways.end_node end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_ways on rwt.way_id = extra_ways.global_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'
union
-- ways in relation pedestrian multipolygon 
select extra_ways.global_id, extra_ways.local_id, 
extra_ways.start_node start_pt,
extra_ways.end_node end_pt
from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_ways on r_ways.member_id = extra_ways.global_id 
union
-- ways that are roads
select extra_ways.global_id global_way_id, extra_ways.local_id local_way_id, 
extra_ways.start_node start_pt,
extra_ways.end_node end_pt
from way_tags wt
join extra_ways on wt.way_id = extra_ways.global_id
  left join relation_members rm on rm.member_type = 'W' and rm.member_id = wt.way_id and rm.relation_id in 
(
select r.id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
)
 where wt.k = 'highway' 
   and wt.v <> 'proposed'
   and rm.member_id is null
) highways
join extra_suburbs st_end_suburb on ST_Covers(st_end_suburb.boundary, highways.start_pt) and ST_Covers(st_end_suburb.boundary, highways.end_pt)
left join way_tags way_suburb_name on st_end_suburb.id = way_suburb_name.way_id and way_suburb_name.k = 'name'
left join relation_tags rel_suburb_name on st_end_suburb.id = rel_suburb_name.relation_id and rel_suburb_name.k = 'name'
left join way_tags way_suburb_level on st_end_suburb.id = way_suburb_level.way_id and way_suburb_level.k = 'admin_level'
left join relation_tags rel_suburb_level on st_end_suburb.id = rel_suburb_level.relation_id and rel_suburb_level.k = 'admin_level'

) i_suburb where suburb_rank = 1

) suburb 
where extra_toponym_city.global_way_id = suburb.global_way_id and extra_toponym_city.local_way_id = suburb.local_way_id;

/********** RoadElement.StartsAtNode **********/

drop table if exists RoadElementStartsAtNode ;

Create Table RoadElementStartsAtNode As
select distinct graph_uri,
'OS' || lpad(highway.way_id::text,11,'0') || 'RE/' || way_nodes.sequence_id way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' start_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from way_tags highway 
join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.way_id = e.global_way_id 
join way_nodes on highway.way_id = way_nodes.way_id 
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.way_id = extra_ways.global_id and way_nodes.sequence_id = extra_ways.local_id
where highway.k = 'highway' and highway.v <> 'proposed'
union -- pedestrian (squares)
select distinct graph_uri,
'OS' || lpad(highway.id::text,11,'0') || 'RE/' || way_nodes.sequence_id way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' start_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from ways highway 
join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.id = e.global_way_id 
join way_nodes on highway.id = way_nodes.way_id 
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.id = extra_ways.global_id and way_nodes.sequence_id = extra_ways.local_id
join relation_members r on highway.id = r.member_id and r.member_type = 'W' 
join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
;

/********** RoadElement.EndsAtNode **********/

drop table if exists RoadElementEndsAtNode ;

Create Table RoadElementEndsAtNode As
select distinct graph_uri,
'OS' || lpad(highway.way_id::text,11,'0') || 'RE/' || (way_nodes.sequence_id-1) way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' end_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from way_tags highway 
  join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.way_id = e.global_way_id 
join way_nodes on highway.way_id = way_nodes.way_id and way_nodes.sequence_id > 0
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.way_id = extra_ways.global_id and way_nodes.sequence_id - 1 = extra_ways.local_id
where highway.k = 'highway' and highway.v <> 'proposed'
union -- pedestrian (squares)
select distinct graph_uri,
'OS' || lpad(highway.id::text,11,'0') || 'RE/' || (way_nodes.sequence_id-1) way_id, 
'OS' || lpad(nodes.id::text,11,'0') || 'NO' end_node_id, 
'terminale (inizio o fine elemento stradale)' node_type,
ST_X(nodes.geom) long,
ST_Y(nodes.geom) lat
from ways highway 
  join extra_config_graph cfg on 1=1
join (select distinct global_way_id from extra_toponym_city) e on highway.id = e.global_way_id 
join way_nodes on highway.id = way_nodes.way_id and way_nodes.sequence_id > 0
join nodes on way_nodes.node_id = nodes.id
join extra_ways on highway.id = extra_ways.global_id and way_nodes.sequence_id - 1 = extra_ways.local_id
join relation_members r on highway.id = r.member_id and r.member_type = 'W' 
join relation_tags r_type on r.relation_id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
join relation_tags r_pedestrian on r.relation_id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
;

----- Measure Restrictions

-- Measure Restrictions on Nodes

drop table if exists node_maxweight;

create table node_maxweight as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxweight' as varchar(255)) p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_limit, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxweight on nodes.id = tag_maxweight.node_id and 
trim(replace(replace(replace(replace(tag_maxweight.k,'maxweight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxaxleload;

create table node_maxaxleload as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxaxleload' as varchar(255)) p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_limit, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxaxleload on nodes.id = tag_maxaxleload.node_id and 
trim(replace(replace(replace(replace(tag_maxaxleload.k,'maxaxleload',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxheight;

create table node_maxheight as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxheight' as varchar(255)) p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_limit, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxheight on nodes.id = tag_maxheight.node_id and 
trim(replace(replace(replace(replace(tag_maxheight.k,'maxheight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxwidth;

create table node_maxwidth as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxwidth' as varchar(255)) p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_limit, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxwidth on nodes.id = tag_maxwidth.node_id and
trim(replace(replace(replace(replace(tag_maxwidth.k,'maxwidth',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;
drop table if exists node_maxlength;

create table node_maxlength as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxlength' as varchar(255)) p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_limit, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxlength on nodes.id = tag_maxlength.node_id and
trim(replace(replace(replace(replace(tag_maxlength.k,'maxlength',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxdraught;

create table node_maxdraught as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxdraught' as varchar(255)) p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_limit, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxdraught on nodes.id = tag_maxdraught.node_id and 
trim(replace(replace(replace(replace(tag_maxdraught.k,'maxdraught',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxspeed;

create table node_maxspeed as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxspeed' as varchar(255)) p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_limit, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxspeed on nodes.id = tag_maxspeed.node_id and 
trim(replace(replace(replace(replace(tag_maxspeed.k,'maxspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_minspeed;

create table node_minspeed as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'minspeed' as varchar(255)) p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_limit, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_minspeed on nodes.id = tag_minspeed.node_id and 
trim(replace(replace(replace(replace(tag_minspeed.k,'minspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

drop table if exists node_maxstay;

create table node_maxstay as
select 
graph.graph_uri, 
coalesce(resn.start_node_id, reen.end_node_id) p_where,
cast(varchar 'maxstay' as varchar(255)) p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_limit, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from nodes 
left join RoadElementStartsAtNode resn on resn.start_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
left join RoadElementEndsAtNode reen on reen.end_node_id = 'OS' || lpad(nodes.id::text,11,'0') || 'NO'
join node_tags tag_maxstay on nodes.id = tag_maxstay.node_id and 
trim(replace(replace(replace(replace(tag_maxstay.k,'maxstay',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1
where resn.start_node_id is not null or reen.end_node_id is not null ;

-- Measure Restrictions on Ways

drop table if exists way_maxweight;

create table way_maxweight as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxweight' as varchar(255)) p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_limit, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxweight on ways.id = tag_maxweight.way_id and 
trim(replace(replace(replace(replace(tag_maxweight.k,'maxweight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxaxleload;

create table way_maxaxleload as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxaxleload' as varchar(255)) p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_limit, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxaxleload on ways.id = tag_maxaxleload.way_id and 
trim(replace(replace(replace(replace(tag_maxaxleload.k,'maxaxleload',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxheight;

create table way_maxheight as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxheight' as varchar(255)) p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_limit, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxheight on ways.id = tag_maxheight.way_id and 
trim(replace(replace(replace(replace(tag_maxheight.k,'maxheight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxwidth;

create table way_maxwidth as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxwidth' as varchar(255)) p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_limit, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxwidth on ways.id = tag_maxwidth.way_id and 
trim(replace(replace(replace(replace(tag_maxwidth.k,'maxwidth',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxlength;

create table way_maxlength as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxlength' as varchar(255)) p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_limit, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxlength on ways.id = tag_maxlength.way_id and 
trim(replace(replace(replace(replace(tag_maxlength.k,'maxlength',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxdraught;

create table way_maxdraught as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxdraught' as varchar(255)) p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_limit, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxdraught on ways.id = tag_maxdraught.way_id and 
trim(replace(replace(replace(replace(tag_maxdraught.k,'maxdraught',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxspeed;

create table way_maxspeed as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxspeed' as varchar(255)) p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_limit, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxspeed on ways.id = tag_maxspeed.way_id and trim(replace(replace(replace(replace(tag_maxspeed.k,'maxspeed',''),'forward',''),'backward',''),':','')) = '' 
join extra_config_graph graph on 1=1;

drop table if exists way_minspeed;

create table way_minspeed as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'minspeed' as varchar(255)) p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_limit, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_minspeed on ways.id = tag_minspeed.way_id and
trim(replace(replace(replace(replace(tag_minspeed.k,'minspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists way_maxstay;

create table way_maxstay as
select distinct
graph.graph_uri, 
case when way_relation.relation_uri is null then 'OS' || lpad(ways.id::text,11,'0') || 'SR' else 'OS' || lpad(ways.id::text,11,'0') || 'RE/' || extra_ways.local_id end p_where, 
cast(varchar 'maxstay' as varchar(255)) p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_limit, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from ways
join extra_ways on ways.id = extra_ways.global_id
left join (
select distinct 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) way_relation on ways.id = way_relation.member_id
join way_tags tag_maxstay on ways.id = tag_maxstay.way_id and 
trim(replace(replace(replace(replace(tag_maxstay.k,'maxstay',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

-- Measure Restrictions on Relations

drop table if exists relation_maxweight;

create table relation_maxweight as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxweight' as varchar(255)) p_what,
case when position('@' in tag_maxweight.v) = 0 then tag_maxweight.v else trim(substring(tag_maxweight.v,1,-1+position('@' in tag_maxweight.v))) end p_limit, 
case when tag_maxweight.k like '%forward%' then 'forward' when tag_maxweight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxweight.v) > 1 then trim(substring(tag_maxweight.v, 1+position('@' in tag_maxweight.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxweight on relations.id = tag_maxweight.relation_id and 
trim(replace(replace(replace(replace(tag_maxweight.k,'maxweight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxaxleload;

create table relation_maxaxleload as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxaxleload' as varchar(255)) p_what,
case when position('@' in tag_maxaxleload.v) = 0 then tag_maxaxleload.v else trim(substring(tag_maxaxleload.v,1,-1+position('@' in tag_maxaxleload.v))) end p_limit, 
case when tag_maxaxleload.k like '%forward%' then 'forward' when tag_maxaxleload.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxaxleload.v) > 1 then trim(substring(tag_maxaxleload.v, 1+position('@' in tag_maxaxleload.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxaxleload on relations.id = tag_maxaxleload.relation_id and 
trim(replace(replace(replace(replace(tag_maxaxleload.k,'maxaxleload',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxheight;

create table relation_maxheight as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxheight' as varchar(255)) p_what,
case when position('@' in tag_maxheight.v) = 0 then tag_maxheight.v else trim(substring(tag_maxheight.v,1,-1+position('@' in tag_maxheight.v))) end p_limit, 
case when tag_maxheight.k like '%forward%' then 'forward' when tag_maxheight.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxheight.v) > 1 then trim(substring(tag_maxheight.v, 1+position('@' in tag_maxheight.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxheight on relations.id = tag_maxheight.relation_id and 
trim(replace(replace(replace(replace(tag_maxheight.k,'maxheight',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxwidth;

create table relation_maxwidth as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxwidth' as varchar(255)) p_what,
case when position('@' in tag_maxwidth.v) = 0 then tag_maxwidth.v else trim(substring(tag_maxwidth.v,1,-1+position('@' in tag_maxwidth.v))) end p_limit, 
case when tag_maxwidth.k like '%forward%' then 'forward' when tag_maxwidth.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxwidth.v) > 1 then trim(substring(tag_maxwidth.v, 1+position('@' in tag_maxwidth.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxwidth on relations.id = tag_maxwidth.relation_id and 
trim(replace(replace(replace(replace(tag_maxwidth.k,'maxwidth',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxlength;

create table relation_maxlength as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxlength' as varchar(255)) p_what,
case when position('@' in tag_maxlength.v) = 0 then tag_maxlength.v else trim(substring(tag_maxlength.v,1,-1+position('@' in tag_maxlength.v))) end p_limit, 
case when tag_maxlength.k like '%forward%' then 'forward' when tag_maxlength.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxlength.v) > 1 then trim(substring(tag_maxlength.v, 1+position('@' in tag_maxlength.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxlength on relations.id = tag_maxlength.relation_id and 
trim(replace(replace(replace(replace(tag_maxlength.k,'maxlength',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxdraught;

create table relation_maxdraught as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxdraught' as varchar(255)) p_what,
case when position('@' in tag_maxdraught.v) = 0 then tag_maxdraught.v else trim(substring(tag_maxdraught.v,1,-1+position('@' in tag_maxdraught.v))) end p_limit, 
case when tag_maxdraught.k like '%forward%' then 'forward' when tag_maxdraught.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxdraught.v) > 1 then trim(substring(tag_maxdraught.v, 1+position('@' in tag_maxdraught.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxdraught on relations.id = tag_maxdraught.relation_id and 
trim(replace(replace(replace(replace(tag_maxdraught.k,'maxdraught',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxspeed;

create table relation_maxspeed as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxspeed' as varchar(255)) p_what,
case when position('@' in tag_maxspeed.v) = 0 then tag_maxspeed.v else trim(substring(tag_maxspeed.v,1,-1+position('@' in tag_maxspeed.v))) end p_limit, 
case when tag_maxspeed.k like '%forward%' then 'forward' when tag_maxspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxspeed.v) > 1 then trim(substring(tag_maxspeed.v, 1+position('@' in tag_maxspeed.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxspeed on relations.id = tag_maxspeed.relation_id and 
trim(replace(replace(replace(replace(tag_maxspeed.k,'maxspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_minspeed;

create table relation_minspeed as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'minspeed' as varchar(255)) p_what,
case when position('@' in tag_minspeed.v) = 0 then tag_minspeed.v else trim(substring(tag_minspeed.v,1,-1+position('@' in tag_minspeed.v))) end p_limit, 
case when tag_minspeed.k like '%forward%' then 'forward' when tag_minspeed.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_minspeed.v) > 1 then trim(substring(tag_minspeed.v, 1+position('@' in tag_minspeed.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_minspeed on relations.id = tag_minspeed.relation_id and 
trim(replace(replace(replace(replace(tag_minspeed.k,'minspeed',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;

drop table if exists relation_maxstay;

create table relation_maxstay as 
select 
graph.graph_uri, 
relations.relation_uri p_where,
cast(varchar 'maxstay' as varchar(255)) p_what,
case when position('@' in tag_maxstay.v) = 0 then tag_maxstay.v else trim(substring(tag_maxstay.v,1,-1+position('@' in tag_maxstay.v))) end p_limit, 
case when tag_maxstay.k like '%forward%' then 'forward' when tag_maxstay.k like '%backward%' then 'backward' else null end p_direction ,
case when position('@' in tag_maxstay.v) > 1 then trim(substring(tag_maxstay.v, 1+position('@' in tag_maxstay.v))) else null end p_condition
from
(
select distinct r.id, 'OS' || lpad(r.id::text,11,'0') || 'LR' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'route'
  left join relation_tags r_route on r.id = r_route.relation_id and r_route.k = 'route'
  left join relation_tags r_network on r.id = r_network.relation_id and r_network.k = 'network'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join way_tags rwt on r_ways.member_id = rwt.way_id and rwt.k = 'highway'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
 where COALESCE(r_route.v,'road') = 'road'
   and COALESCE(r_network.v, '--') <> 'e-road' 
   and rwt.v <> 'proposed'  
 union -- pedestrian relations (squares)
select r.id, 'OS' || lpad(r.id::text,11,'0') || 'SQ' relation_uri, r_ways.member_id
  from relations r
  join relation_tags r_type on r.id = r_type.relation_id and r_type.k = 'type' and r_type.v = 'multipolygon'
  join relation_tags r_pedestrian on r.id = r_pedestrian.relation_id and r_pedestrian.k = 'highway' and r_pedestrian.v = 'pedestrian'
  join relation_members r_ways on r.id = r_ways.relation_id and r_ways.member_type = 'W'
  join extra_toponym_city e on r_ways.member_id = e.global_way_id 
) relations
join relation_tags tag_maxstay on relations.id = tag_maxstay.relation_id and 
trim(replace(replace(replace(replace(tag_maxstay.k,'maxstay',''),'forward',''),'backward',''),':','')) = ''
join extra_config_graph graph on 1=1;