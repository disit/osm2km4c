/* OSM2KM4C
   Copyright (C) 2017 DISIT Lab http://www.disit.org - University of Florence

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU Affero General Public License as
   published by the Free Software Foundation, either version 3 of the
   License, or (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU Affero General Public License for more details.

   You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>. */

Prefix km4c:<http://www.disit.org/km4city/schema#>
Prefix dct:<http://purl.org/dc/terms/>
Prefix foaf:<http://xmlns.com/foaf/0.1/>
Prefix geo:<http://www.w3.org/2003/01/geo/wgs84_pos#>
Prefix fn:<http://aksw.org/sparqlify/>
Prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>

/****************************
**** Lanes ******************
****************************/

/*** Lane ******************/

Create View LanesURI As

Construct {
Graph ?graph_uri {
        ?lane a km4c:Lane ;
		km4c:where ?lanes ;
		km4c:position ?pos .
	?lanes km4c:lanesDetails ?lanes_details .
	?lanes_details a rdf:Seq .
	?lanes_details ?rdf_nnn ?lane
}}

With
?graph_uri = uri(?graph_uri)
?lanes = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction))) 
?lane = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/", ?pos)) 
?pos = typedLiteral(?pos,"http://www.w3.org/2001/XMLSchema#integer")
?lanes_details = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/details"))
?rdf_nnn = uri(concat("http://www.w3.org/1999/02/22-rdf-syntax-ns#",?rdf_nnn))

From [[
select distinct graph_uri, p_where, s_direction, pos, '_' || pos rdf_nnn from (
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_turn union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_access union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxweight union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxaxleload union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxheight union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxwidth union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxlength union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxdraught union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxspeed union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_minspeed union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxstay
) uris_tbl
]]

/*** Lanes URI *************/

Create View LanesURI As

Construct {
Graph ?graph_uri {
	?lanes a km4c:Lanes ;
       	       km4c:where ?where .
	?where km4c:lanes ?lanes .
}}

With
?graph_uri = uri(?graph_uri)
?where = uri(concat("http://www.disit.org/km4city/resource/", ?p_where)) 
?lanes = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction))) 

From [[
select distinct graph_uri, p_where, s_direction from (
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_count union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_turn union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_access union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxweight union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxaxleload union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxheight union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxwidth union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxlength union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxdraught union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxspeed union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_minspeed union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction from lanes_maxstay
) uris_tbl
]]

/*** Lanes.direction *************/

Create View LanesDirection As

Construct {
Graph ?graph_uri {
	?lanes km4c:direction ?direction
}}

With
?graph_uri = uri(?graph_uri)
?lanes = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?p_direction))) 
?direction = plainLiteral(?p_direction)

From [[
select distinct graph_uri, p_where, p_direction from (
select graph_uri, p_where, p_direction from lanes_count where not p_direction is null union
select graph_uri, p_where, p_direction from lanes_turn where not p_direction is null union
select graph_uri, p_where, p_direction from lanes_access where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxweight where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxaxleload where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxheight where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxwidth where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxlength where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxdraught where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxspeed where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_minspeed where not p_direction is null union
select graph_uri, p_where, p_direction s_direction from lanes_maxstay where not p_direction is null
) lanes_direction_tbl
]]

/*** Turns ***/
Create View Turns As

Construct {
Graph ?graph_uri {
	?lane km4c:turn ?turn 
}}

With
?graph_uri = uri(?graph_uri)
?lane = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?p_pos)) 
?turn = plainLiteral(?turn)

From [[
select distinct graph_uri, p_where, coalesce(p_direction, 'alldirections') s_direction, pos p_pos, turn from lanes_turn
]]

/*** Lanes Restrictions Bag URIs ***/

Create View LanesRestrictionsBagURIs As

Construct {
Graph ?graph_uri {
	?lane_restrictions a rdf:Bag .
	?lane km4c:restrictions ?lane_restrictions
}}

With
?graph_uri = uri(?graph_uri)
?lane = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?pos)) 
?lane_restrictions = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?pos, "/restrictions")) 
From [[
select distinct graph_uri, p_where, s_direction, pos from (
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_access union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxweight union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxaxleload union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxheight union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxwidth union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxlength union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxdraught union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxspeed union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_minspeed union
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, pos from lanes_maxstay
) uris
]]

/*** Lanes Access Restrictions ***/

Create View LanesAccessRestrictions As

Construct {
Graph ?graph_uri {
	?restriction a km4c:AccessRestriction ;
		     a km4c:Restriction;
		     km4c:where ?where;
		     km4c:access ?access .
        ?lane_restr_bag ?rdf_nnn ?restriction 
}}

With
?graph_uri = uri(?graph_uri)
?restriction = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/access/", fn:urlEncode(?s_who), "/", fn:urlEncode(?s_direction), "/", fn:urlEncode(?s_condition), "/lanes/" , ?pos))
?where = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?pos)) 
?access = plainLiteral(?p_access)
?lane_restr_bag = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?pos, "/restrictions")) 
?rdf_nnn = uri(concat("http://www.w3.org/1999/02/22-rdf-syntax-ns#",?rdf_nnn))

From [[
select graph_uri, p_where, coalesce(p_who,'everybody') s_who, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition, pos, restriction p_access, '_' || rank() over (partition by p_where, coalesce(p_direction, 'alldirections'), pos order by coalesce(p_who,'everybody'), coalesce(p_condition, 'unconditioned'), restriction) rdf_nnn from lanes_access 
]]

Create View LanesAccessRestrictionsWho As

Construct {
Graph ?graph_uri {
	?s km4c:who ?who
}}

With
?graph_uri = uri(?graph_uri)
?s = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/access/", fn:urlEncode(?p_who), "/", fn:urlEncode(?s_direction), "/", fn:urlEncode(?s_condition), "/lanes/" , ?pos))
?who = plainLiteral(?p_who)
From [[
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_access where p_who is not null
]]

Create View LanesAccessRestrictionsDirection As

Construct {
Graph ?graph_uri {
	?s km4c:direction ?direction
}}

With
?graph_uri = uri(?graph_uri)
?s = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/access/", fn:urlEncode(?s_who), "/", fn:urlEncode(?p_direction), "/", fn:urlEncode(?s_condition), "/lanes/" , ?pos))
?direction = plainLiteral(?p_direction)
From [[
select *, coalesce(p_who, 'everybody') s_who, coalesce(p_condition, 'unconditioned') s_condition from lanes_access where p_direction is not null
]]

Create View LanesAccessRestrictionCondition As

Construct {
Graph ?graph_uri {
	?s km4c:condition ?condition
}}

With
?graph_uri = uri(?graph_uri)
?s = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/access/", fn:urlEncode(?s_who), "/", fn:urlEncode(?s_direction), "/", fn:urlEncode(?p_condition), "/lanes/" , ?pos))
?condition = plainLiteral(?p_condition)
From [[
select *, coalesce(p_who, 'everybody') s_who, coalesce(p_direction, 'alldirections') s_direction from lanes_access where p_condition is not null
]]

/***** Lanes Max Min Restrictions ************/

Create View LanesMaxMinRestrictions As

Construct {
Graph ?graph_uri {
	?s a km4c:MaxMinRestriction;
           a km4c:Restriction;
	   km4c:where ?where;
	   km4c:what ?what;
	   km4c:limit ?limit .
	?lane_restr_bag ?rdf_nnn ?s 
}}

With
?graph_uri = uri(?graph_uri)
?s = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/maxmin/", fn:urlEncode(?p_what), "/" , fn:urlEncode(?s_direction), "/", fn:urlEncode(?s_condition), "/lanes/", ?pos)) 
?where = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?pos)) 
?what = plainLiteral(?p_what)
?limit = plainLiteral(?p_limit)
?lane_restr_bag = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/" , ?pos, "/restrictions")) 
?rdf_nnn = uri(concat("http://www.w3.org/1999/02/22-rdf-syntax-ns#",?rdf_nnn))

From [[
select lanes_maxmin_tbl.*, '_' || ( access_count_tbl.access_count + rank() over (partition by lanes_maxmin_tbl.p_where, lanes_maxmin_tbl.s_direction, lanes_maxmin_tbl.pos order by p_what, s_condition, p_limit) ) rdf_nnn from (
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxweight union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxaxleload union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxheight union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxwidth union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxlength union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxdraught union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxspeed union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_minspeed union
select *, coalesce(p_direction, 'alldirections') s_direction, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxstay 
) lanes_maxmin_tbl 
join 
(
	select p_where, coalesce(p_direction, 'alldirections') s_direction, pos, count(1) access_count from lanes_access 
	group by p_where, coalesce(p_direction, 'alldirections'), pos
) access_count_tbl
on  lanes_maxmin_tbl.p_where = access_count_tbl.p_where and lanes_maxmin_tbl.s_direction = access_count_tbl.s_direction and lanes_maxmin_tbl.pos = access_count_tbl.pos
]]

Create View LanesMaxMinRestrictionsDirection As

Construct {
Graph ?graph_uri {
	?s km4c:direction ?direction
}}

With
?graph_uri = uri(?graph_uri)
?s = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/maxmin/", fn:urlEncode(?p_what), "/" , fn:urlEncode(?p_direction), "/", fn:urlEncode(?s_condition), "/lanes/", ?pos)) 
?direction = plainLiteral(?p_direction)

From [[
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxweight where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxaxleload where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxheight where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxwidth where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxlength where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxdraught where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxspeed where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_minspeed where p_direction is not null union
select *, coalesce(p_condition, 'unconditioned') s_condition from lanes_maxstay where p_direction is not null
]]

Create View LanesMaxMinRestrictionsCondition As

Construct {
Graph ?graph_uri {
	?s km4c:condition ?condition
}}

With
?graph_uri = uri(?graph_uri)
?s = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/restriction/maxmin/", fn:urlEncode(?p_what), "/" , fn:urlEncode(?s_direction), "/", fn:urlEncode(?p_condition), "/lanes/", ?pos)) 
?condition = plainLiteral(?p_condition)

From [[
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxweight where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxaxleload where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxheight where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxwidth where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxlength where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxdraught where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxspeed where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_minspeed where p_condition is not null union
select *, coalesce(p_direction, 'alldirections') s_direction from lanes_maxstay where p_condition is not null 
]]

/****** Lanes.lanesCount URI *****/

Create View LanesCountURI As

Construct {
Graph ?graph_uri {
	?lanes km4c:lanesCount ?lanesCount .
	?lanesCount a km4c:LanesCount ;
	            ?means ?count
	
}}

With
?graph_uri = uri(?graph_uri)
?lanesCount = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction), "/count" )) 
?lanes = uri(concat("http://www.disit.org/km4city/resource/", ?p_where, "/lanes/", fn:urlEncode(?s_direction))) 
?means = uri(?p_who)
?count = typedLiteral(?lanes_count,"http://www.w3.org/2001/XMLSchema#decimal")
From [[
select graph_uri, p_where, coalesce(p_direction,'alldirections') s_direction, 'km4c:' || coalesce(p_who,'undesignated') p_who, lanes_count from lanes_count
]]
